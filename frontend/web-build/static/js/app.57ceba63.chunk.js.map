{"version":3,"sources":["src/assets/background_dot.png","src/constants/backend.constants.ts","native/AppLoader.tsx","src/components/common/Background.tsx","src/screens/account/startScreen.tsx","src/components/common/background.tsx","src/utils/emailValidator.ts","src/utils/passwordValidator.ts","src/utils/storage.ts","src/services/request.service.ts","src/services/auth.service.ts","src/services/crud.service.ts","src/services/get.service.ts","src/context/vendor.context.tsx","src/context/user.context.tsx","src/context/authUtils.tsx","src/components/account/accounSign.tsx","src/screens/account/loginScreen.tsx","src/components/common/Header.tsx","src/screens/account/registerScreen.tsx","src/utils/nameValidator.ts","src/screens/account/resetPasswordScreen.tsx","src/components/common/Paragraph.tsx","src/screens/account/dashboardScreen.tsx","src/navigation/accountStackNavigator.tsx","src/context/products.context.tsx","src/components/common/time.tsx","src/utils/initialize.ts","src/hooks/useVendorIcon.ts","src/hooks/useImagePlaceholder.ts","src/hooks/useAvatarPlaceholder.ts","src/components/products/product.tsx","src/screens/products/productScreen.tsx","src/screens/vendor/favoritesScreen.tsx","src/components/orders/orderTransaction.tsx","src/screens/orders/orderTransactionScreen.tsx","src/screens/orders/transactionOrdersScreen.tsx","src/screens/vendor/makeOfferScreen.tsx","src/screens/vendor/addProductScreen.tsx","src/components/account/messages.tsx","src/utils/overlay.ts","src/navigation/bottomTabNavigator.tsx","src/components/products/productDetail.tsx","src/screens/products/productDetailScreen.tsx","src/navigation/productStackNavigator.tsx","src/context/preferences.context.ts","src/screens/vendor/drawerContent.tsx","src/navigation/drawerNavigator.tsx","src/components/common/theme.tsx","src/navigation/rootNavigator.tsx","src/navigation/coreNavigator.tsx","src/utils/nativeStorage.ts","src/context/authorization.context.tsx","src/core.tsx","App.tsx","src/hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["module","exports","DEFAULT_AVATAR","DEFAULT_PLACEHOLDER","AppLoader","children","splash","Constants","manifest","image","AnimatedAppLoader","uri","React","useState","isSplashReady","setSplashReady","onFinish","useMemo","Asset","fromURI","toString","downloadAsync","AnimatedSplashScreen","autoHideSplash","startAsync","a","async","onError","console","error","animation","Animated","Value","isAppReady","setAppReady","isSplashAnimationComplete","setAnimationComplete","useEffect","timing","toValue","duration","useNativeDriver","start","onImageLoaded","SplashScreen","Promise","all","View","style","flex","pointerEvents","StyleSheet","absoluteFill","backgroundColor","opacity","Image","width","height","resizeMode","transform","scale","source","onLoadEnd","fadeDuration","catch","Background","useTheme","ImageBackground","require","styles","background","KeyboardAvoidingView","container","behavior","create","padding","maxWidth","alignSelf","alignItems","justifyContent","StartScreen","navigation","Paragraph","Button","mode","onPress","navigate","emailValidator","email","test","passwordValidator","password","length","localStorage","AsyncStorage","getItem","then","json","JSON","parse","API","RequestTicket","method","access","url","refresh","body","Request","headers","Authorization","credentials","stringify","signUpRequest","request","username","fetch","signInRequest","signOutRequest","accessToken","deleteRequest","getRequest","res","getVendorFavorites","id","VendorActionTypes","initialState","vendor","undefined","loading","VendorData","createContext","VendorDataProvider","vendorId","setVendorId","vendorProducts","setVendorProducts","vendorFavoritesFeed","setVendorFavoritesFeed","vendorFaves","setVendorFaves","orderRequests","setOrderRequests","ordersMade","setOrdersMade","useReducer","state","type","favorites","order_requests","orders_made","fetchVendor","fetchVendorSuccess","fetchVendorFailure","fetchVendorFaves","fetchVendorOrdersMade","fetchVendorOrderRequests","dispatch","products","Provider","value","loadVendor","response","vendorData","loadVendorFaves","loadVendorFavorites","useVendorData","useContext","UserContext","UserProvider","vendorDispatch","userId","setUserId","setUsername","setEmail","setLoading","setPassword","heading","setHeading","alert","setAlert","returning","setReturning","setOpenSuccess","setOpenWarning","setOpenError","setMessage","onSuccess","text","setTimeout","onWarning","handleSignIn","e","ok","data","user","name","message","log","handleSignOut","localToken","handleDelete","AuthActionTypes","AuthContext","isLoading","isSignedOut","isSignedUp","noAccount","isSignedIn","userToken","SignIn","signIn","signUp","useForm","defaultValues","rememberMe","control","setFocus","handleSubmit","formConfigArray","textInputProps","label","left","TextInput","Icon","onChange","event","nativeEvent","rules","required","minLength","maxLength","LoginScreen","TouchableOpacity","goBack","Headline","flexDirection","forgotPassword","marginBottom","row","marginTop","Header","theme","Text","fontSize","color","colors","primary","fontWeight","paddingVertical","RegisterScreen","setName","returnKeyType","onChangeText","autoCapitalize","autoCompleteType","textContentType","keyboardType","secureTextEntry","nameError","nameValidator","emailError","passwordError","reset","index","routes","replace","ResetPasswordScreen","TouchableRipple","props","lineHeight","textAlign","Dashboard","ProductsActionTypes","AccountStack","createStackNavigator","AccountStackNavigator","Navigator","initialRouteName","headerMode","screenOptions","header","scene","previous","options","descriptor","title","headerTitle","route","Appbar","surface","BackAction","marginLeft","openDrawer","size","Content","MaterialCommunityIcons","marginRight","titleStyle","Screen","component","getFocusedRouteNameFromRoute","ProductsData","ProductsDataProvider","fetchProducts","fetchProductsSuccess","fetchProductsFailure","loadProducts","TimeAgo","date","dayjs","extend","relativeTime","dateTime","toISOString","fromNow","initialize","charAt","toUpperCase","useVendorIcon","vendorIcon","setVendorIcon","vendorInitials","setVendorInitials","thumbnail","full_size","useImagePlaceholder","productImage","setProductImage","productThumbnail","setProductThumbnail","useAvatarPlaceholder","avatarImage","setAvatarImage","Product","product","otherVendorInitials","inFavorites","some","favorite","iconColor","contentColor","imageBorderColor","randomColor","Math","floor","random","slug","Surface","leftColumn","Badge","position","bottom","right","online","accent","disabled","rightColumn","topRow","Title","product_count","iconContainer","Caption","iconDescription","order_count","handle","price","condition","is_available","Chip","description","borderColor","bottomRow","hitSlop","top","IconButton","icon","created_at","updated_at","paddingTop","paddingRight","dot","borderWidth","hairlineWidth","borderRadius","button","badge","Separator","ProductScreen","ActivityIndicator","FlatList","contentContainerStyle","map","productProps","push","renderItem","item","keyExtractor","ItemSeparatorComponent","FavoriteProductsScreen","allVendorFaves","OrderTransaction","order","Subheading","status","toLowerCase","_","toUpper","uppercase","paddingBottom","OrderTransactionScreen","orderReqs","initialLayout","Dimensions","get","OrderRequests","OrdersMade","TransactionOrdersScreen","setIndex","key","renderScene","SceneMap","tabBarColor","Fragment","navigationState","onIndexChange","renderTabBar","indicatorStyle","shadowColor","labelStyle","MakeOfferScreen","ScrollView","scrollViewContent","centerText","paddingHorizontal","AddProductScreen","categories","setCategories","categoryOptions","setCategoryOptions","images","setImages","category","setError","setValue","errors","formState","loadCategories","Platform","OS","ImagePicker","pattern","mediaTypes","Images","allowsEditing","allowsMultipleSelection","aspect","quality","results","cancelled","selected","result","validatedData","imagesForm","FormData","img","append","Message","calculateColor","surfaceColor","elevation","elevationOverlayTransparency","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","Tab","createMaterialBottomTabNavigator","BottomTabs","routeName","safeArea","useSafeAreaInsets","isFocused","useIsFocused","dark","DarkTheme","inputRange","interpolate","outputRange","overlay","setRendorStore","backBehavior","shifting","activeColor","tabBarIcon","Portal","FAB","visible","ProductDetail","ran","dom","vendorImage","avatar","content","product_images","similar_products","similar","footerRow","ProductDetailScreen","params","Stack","StackNavigator","PreferencesContext","rtl","toggleTheme","toggleRTL","DrawerContent","paperTheme","translateX","interpolateNode","progress","DrawerContentScrollView","drawerContent","userInfoSection","toggleDrawer","caption","section","paragraph","drawerSection","DrawerItem","preference","Switch","paddingLeft","Drawer","createDrawerNavigator","DrawerNavigator","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","isReadyRef","navigationRef","changeStack","stackName","resetRoot","current","CoreNavigator","getRootState","navigationTheme","NavigationContainer","ref","onReady","nativeStorage","SecureStore","AuthorizationProvider","prevState","action","TO_SIGNUP_PAGE","TO_SIGNIN_PAGE","RESTORE_TOKEN","token","SIGNED_UP","SIGN_IN","SIGN_OUT","bootstrapAsync","authContextValue","signOut","Core","colorScheme","useColorScheme","setTheme","I18nManager","isRTL","useCallback","forceRTL","Updates","preferences","App","isLoadingComplete","setLoadingComplete","Font","Ionicons","font","warn","useCachedResources"],"mappings":"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","file":"static/js/app.57ceba63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background_dot.06ffdbc6.png\";","export const DEFAULT_AVATAR =\n  \"https://thrifthub.s3.ap-southeast-1.amazonaws.com/media/images/default_avatar.png\";\nexport const DEFAULT_PLACEHOLDER =\n  \"https://thrifthub.s3.ap-southeast-1.amazonaws.com/media/images/default_avatar.png\";\n\nexport const MOBILE_SPLASHSCREEN =\n  \"https://thrifthub.s3.ap-southeast-1.amazonaws.com/static/frontend/splash.png\";\n\nexport const DEFAULT_ICON =\n  \"https://thrifthub.s3.ap-southeast-1.amazonaws.com/static/frontend/icon.png\";\n\nexport const DEFAULT_ADAPTIVE_ICON =\n  \"https://thrifthub.s3.ap-southeast-1.amazonaws.com/static/frontend/adaptive-icon.png\";\n\nexport const PRODUCT_ENDPONT = \"store\";\nexport const CATEGORY_ENDPOINT = \"category\";\nexport const VENDOR_ENDPOINT = \"vendor\";\nexport const ORDER_ENDPOINT = \"orders\";\nexport const ORDERDETAILS_ENDPONT = \"orderdetail\";\nexport const API = \"https://thrifthub-backend.herokuapp.com/api\";\n","import AppLoading from \"expo-app-loading\";\nimport { Asset } from \"expo-asset\";\nimport Constants from \"expo-constants\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as Updates from \"expo-updates\";\nimport React from \"react\";\nimport {\n  Animated,\n  Button,\n  Platform,\n  StyleSheet,\n  Text,\n  View,\n  ImageURISource,\n} from \"react-native\";\n\nimport {\n  DEFAULT_ADAPTIVE_ICON,\n  MOBILE_SPLASHSCREEN,\n} from \"../src/constants/backend.constants\";\n\n// Instruct SplashScreen not to hide yet, we want to do this manually\nSplashScreen.preventAutoHideAsync().catch(() => {\n  /* reloading the app might trigger some race conditions, ignore them */\n});\n\nexport default function AppLoader({\n  children,\n}: {\n  children?: React.ReactNode;\n}) {\n  const splash = Constants?.manifest?.splash?.image || MOBILE_SPLASHSCREEN;\n  return (\n    <AnimatedAppLoader image={{ uri: splash }}>{children}</AnimatedAppLoader>\n  );\n}\n\nexport function AnimatedAppLoader({\n  children,\n  image,\n}: {\n  children: React.ReactNode;\n  image: ImageURISource;\n}) {\n  const [isSplashReady, setSplashReady] = React.useState(false);\n\n  // const startAsync = React.useMemo(\n  //   // If you use a local image with require(...), use `Asset.fromModule`\n  //   () => () =>\n  //   {\n  //     const splashScreen = Asset.fromURI(MOBILE_SPLASHSCREEN).downloadAsync();\n  //     return splashScreen\n  //   }\n  //   []\n  // );\n\n  const startAsync = React.useMemo(\n    // If you use a local image with require(...), use `Asset.fromModule`\n    () => () => Asset.fromURI(image.toString()).downloadAsync(),\n    [image]\n  );\n\n  const onFinish = React.useMemo(() => setSplashReady(true), []);\n\n  if (!isSplashReady) {\n    return (\n      <AppLoading\n        // Instruct SplashScreen not to hide yet, we want to do this manually\n        autoHideSplash={false}\n        // startAsync={async () => {\n        //   Asset.fromURI(MOBILE_SPLASHSCREEN).downloadAsync();\n        // }}\n        startAsync={async () => {\n          startAsync;\n        }}\n        onError={console.error}\n        onFinish={() => onFinish}\n      />\n    );\n  }\n\n  return <AnimatedSplashScreen image={image}>{children}</AnimatedSplashScreen>;\n}\n\nfunction AnimatedSplashScreen({\n  children,\n  image,\n}: {\n  children: React.ReactNode;\n  image: ImageURISource;\n}) {\n  const animation = React.useMemo(() => new Animated.Value(1), []);\n  const [isAppReady, setAppReady] = React.useState(false);\n  const [isSplashAnimationComplete, setAnimationComplete] =\n    React.useState(false);\n\n  React.useEffect(() => {\n    if (isAppReady) {\n      Animated.timing(animation, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true,\n      }).start(() => setAnimationComplete(true));\n    }\n  }, [isAppReady]);\n\n  const onImageLoaded = React.useMemo(\n    () => async () => {\n      try {\n        await SplashScreen.hideAsync();\n        // Load stuff\n        await Promise.all([]);\n      } catch (e) {\n        // handle errors\n      } finally {\n        setAppReady(true);\n      }\n    },\n    []\n  );\n\n  return (\n    <View style={{ flex: 1 }}>\n      {isAppReady && children}\n      {!isSplashAnimationComplete && (\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              backgroundColor: Constants?.manifest?.splash?.backgroundColor,\n              opacity: animation,\n            },\n          ]}\n        >\n          <Animated.Image\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              resizeMode: Constants?.manifest?.splash?.resizeMode || \"contain\",\n              transform: [\n                {\n                  scale: animation,\n                },\n              ],\n            }}\n            source={image}\n            onLoadEnd={onImageLoaded}\n            fadeDuration={0}\n          />\n        </Animated.View>\n      )}\n    </View>\n  );\n}\n","import React from \"react\";\nimport {\n  ImageBackground,\n  StyleSheet,\n  KeyboardAvoidingView,\n} from \"react-native\";\nimport { useTheme, Surface } from \"react-native-paper\";\n\nexport default function Background({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const theme = useTheme();\n  return (\n    <ImageBackground\n      source={require(\"../../assets/background_dot.png\")}\n      resizeMode=\"repeat\"\n      style={styles.background}\n      // style={{ flex: 1, width: \"100%\", backgroundColor: theme.colors.surface }}\n    >\n      <KeyboardAvoidingView style={styles.container} behavior=\"padding\">\n        {children}\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    width: \"100%\",\n  },\n  container: {\n    flex: 1,\n    padding: 20,\n    width: \"100%\",\n    maxWidth: 340,\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import React from \"react\";\nimport Background from \"../../components/common/Background\";\n\nimport { Paragraph, Button, Headline as Header } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { AccountStackNavigatorParamList } from \"../../types\";\n\nexport default function StartScreen({\n  navigation,\n}: {\n  navigation: StackNavigationProp<AccountStackNavigatorParamList>;\n}) {\n  return (\n    <Background>\n      <Header>Login Template</Header>\n      <Paragraph>\n        The easiest way to start with your amazing application.\n      </Paragraph>\n      <Button\n        mode=\"contained\"\n        onPress={() => navigation.navigate(\"LoginScreen\")}\n      >\n        Login\n      </Button>\n      <Button\n        mode=\"outlined\"\n        onPress={() => navigation.navigate(\"RegisterScreen\")}\n      >\n        Sign Up\n      </Button>\n    </Background>\n  );\n}\n","import React from \"react\";\nimport {\n  ImageBackground,\n  StyleSheet,\n  KeyboardAvoidingView,\n} from \"react-native\";\nimport { useTheme, Surface } from \"react-native-paper\";\n\nexport default function Background({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const theme = useTheme();\n  return (\n    <ImageBackground\n      source={require(\"../../assets/background_dot.png\")}\n      resizeMode=\"repeat\"\n      style={styles.background}\n      // style={{ flex: 1, width: \"100%\", backgroundColor: theme.colors.surface }}\n    >\n      <KeyboardAvoidingView style={styles.container} behavior=\"padding\">\n        {children}\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    width: \"100%\",\n  },\n  container: {\n    flex: 1,\n    padding: 20,\n    width: \"100%\",\n    maxWidth: 340,\n    alignSelf: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","export function emailValidator(email: string) {\n  const re = /\\S+@\\S+\\.\\S+/;\n  if (!email) return \"Email can't be empty.\";\n  if (!re.test(email)) return \"Ooops! We need a valid email address.\";\n  return \"\";\n}\n","export function passwordValidator(password: string) {\n  if (!password) return \"Password can't be empty.\";\n  if (password.length < 5)\n    return \"Password must be at least 5 characters long.\";\n  return \"\";\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const localStorage = {\n  getToken: async () =>\n    AsyncStorage.getItem(\"token\").then((json: any) => {\n      return JSON.parse(json);\n    }),\n  setToken: async (accessToken: AccessToken[\"accessToken\"]) =>\n    AsyncStorage.setItem(\"token\", JSON.stringify(accessToken)),\n  clearToken: async () => AsyncStorage.removeItem(\"token\"),\n\n  setLogoutEvent: () =>\n    window.localStorage.setItem(\"app_logout\", JSON.stringify(Date.now())),\n};\n","/**\n * Functions that pre-packages HTTP requests for a fetcher/handler.\n *\n * Requests are sorted per method for requests like signupRequest and loginRequest to send to the backend efficiently.\n *\n * @see signupRequest\n * @see loginRequest\n * @see LogoutRequest\n * @see putRequest\n * @see getRequest\n */\n\n/**\n * Api backend base URL.\n */\n// const API = \"http://localhost:8000/api\";\nconst API = \"https://thrifthub-backend.herokuapp.com/api\";\n\nexport const RequestTicket = ({\n  method,\n  access,\n  refresh,\n  url,\n  body,\n}: {\n  method: string;\n  access?: AccessToken[\"accessToken\"];\n  refresh?: string;\n  url: string;\n  body?: object;\n}) => {\n  if (method === \"post\") {\n    if (access) {\n      return new Request(`${API}/${url}/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: access ? `Bearer ${access}` : \"\",\n        },\n        credentials: \"include\",\n        body: body ? JSON.stringify(body) : null,\n      });\n    }\n    return new Request(`${API}/${url}/`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n  }\n\n  if (method === \"put\") {\n    return new Request(`${API}/${url}/`, {\n      method: \"PUT\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${access}`,\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  if (method === \"delete\") {\n    return new Request(`${API}/${url}/`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${access}`,\n      },\n    });\n  }\n  return new Request(`${API}/${url}/`, {\n    method: \"GET\",\n    credentials: \"include\",\n    // mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n","import { RequestTicket } from \"./request.service\";\n/**\n * Sign up request handler.\n *\n * @see RequestTicket\n * @param  {object} body body of sign up request\n * @return {Promise} handles user's authentication passport once fulfilled\n */\nexport function signUpRequest({\n  body,\n}: {\n  body: {\n    username: string;\n    email: string;\n    password: string;\n  };\n}) {\n  const request = RequestTicket({\n    method: \"post\",\n    url: \"account/register\",\n    body: {\n      username: body.username,\n      email: body.email,\n      password: body.password,\n    },\n  });\n  return fetch(request);\n}\n\n/**\n * Sign in request handler.\n *\n * @see RequestTicket\n * @param  {object} body body of sign up request\n * @return {Promise} handles user's authentication passport once fulfilled\n */\nexport function signInRequest({\n  body,\n}: {\n  body: {\n    username: string;\n    password: string;\n  };\n}) {\n  const request = RequestTicket({\n    method: \"post\",\n    url: \"account/login\",\n    body: {\n      username: body.username,\n      password: body.password,\n    },\n  });\n  return fetch(request);\n}\n\n/**\n * Sign out request handler.\n *\n * @see RequestTicket\n * @return {null} handles revoking of user's authentication passport without explicit return\n */\nexport function signOutRequest({ accessToken }: AccessToken) {\n  const request = RequestTicket({\n    method: \"post\",\n    url: \"account/logout_all\",\n    access: accessToken,\n  });\n  return fetch(request);\n}\n","import { RequestTicket } from \"./request.service\";\n\n/**\n * CRUD requests that return a prepared fetch. Promise is handled in context.\n *\n */\n\n/**\n * Simple delete request with no body or redirects.\n *\n * @see RequestTicket\n * @see useUserContext\n * @param  {} url url string of backend resource\n * @param  {} accessToken access token stored in context memory for request Authorization header\n * @return {null} handles frontend rerouting once fulfilled without explicit return\n */\nexport function deleteRequest({\n  url,\n  accessToken,\n  body,\n}: {\n  accessToken: AccessToken[\"accessToken\"];\n  url: string;\n  body?: object;\n}) {\n  const request = RequestTicket({\n    method: \"delete\",\n    url,\n    access: accessToken,\n    body,\n  });\n  return fetch(request);\n}\n\n/**\n * Put request.\n *\n * @see RequestTicket\n * @see useUserContext\n * @param  {} url url string of backend resource\n * @param  {} access access token stored in context memory for request Authorization header\n * @param  {} body put request body\n * @return {Promise} handles frontend rerouting once fulfilled\n */\nexport function putRequest({\n  url,\n  accessToken,\n  body,\n}: {\n  accessToken: AccessToken[\"accessToken\"];\n  url: string;\n  body: object;\n}) {\n  const request = RequestTicket({\n    method: \"put\",\n    url,\n    access: accessToken,\n    body,\n  });\n  return fetch(request);\n}\n\n/**\n * Post request handler (General).\n *\n * @see RequestTicket\n * @param  {} url url string of backend resource\n * @param  {} access access token stored in context memory for request Authorization header\n * @param  {} body body of post request\n * @return {null} handles frontend rerouting once fulfilled without explicit return\n */\nexport function postRequest({\n  url,\n  accessToken,\n  refreshToken,\n  body,\n}: {\n  accessToken: AccessToken[\"accessToken\"];\n  refreshToken?: string;\n  url: string;\n  body: object;\n}) {\n  const request = RequestTicket({\n    method: \"post\",\n    url,\n    access: accessToken,\n    refresh: refreshToken || \"\",\n    body,\n  });\n  return fetch(request);\n}\n\n/**\n * Get request handler (General).\n *\n * @see RequestTicket\n * @see useUserContext\n * @param  {} url url string of backend resource\n * @param  {} token access token stored in context memory for request Authorization header\n * @return {Promise}\n */\nexport function getRequest({ url }: { url: string }) {\n  const request = RequestTicket({\n    method: \"get\",\n    url,\n  });\n  return fetch(request).then((res) => res.json());\n}\n","import {\n  getRequest,\n  postRequest,\n  putRequest,\n  deleteRequest,\n} from \"./crud.service\";\n\n// STORE\nexport function getCategories() {\n  return getRequest({ url: `category` });\n}\n\nexport function getProducts() {\n  return getRequest({ url: `store` });\n}\n\nexport function getProductsByCategory(slug: string) {\n  return getRequest({ url: `store/category/${slug}` });\n}\n\nexport function getProductsByVendor(slug: string) {\n  return getRequest({ url: `store/vendor/${slug}` });\n}\n\nexport function searchProducts(query: string) {\n  return getRequest({ url: `store/?search=${query}` });\n}\n\nexport function getProduct(slug: string) {\n  return getRequest({ url: `store/${slug}` });\n}\n\nexport function createProduct(\n  vendor: number,\n  title: string,\n  category: number,\n  description: string,\n  price: string,\n  condition: number,\n  accessToken: AccessToken[\"accessToken\"],\n  image?: string,\n  slug?: string\n) {\n  return postRequest({\n    url: `store`,\n    body: {\n      title,\n      vendor,\n      category,\n      description,\n      slug,\n      price,\n      condition,\n      image,\n    },\n    accessToken,\n  });\n}\n\nexport function updateProduct(\n  accessToken: AccessToken[\"accessToken\"],\n  slug: string,\n  vendor: string,\n  title?: string,\n  category?: string,\n  description?: string,\n  price?: string,\n  condition?: string,\n  images?: string\n) {\n  return putRequest({\n    url: `store/${slug}`,\n    body: {\n      title,\n      vendor,\n      category,\n      description,\n      slug,\n      price,\n      condition,\n      images,\n    },\n    accessToken,\n  });\n}\n\nexport function deleteProduct(slug: string, accessToken: string) {\n  return deleteRequest({ url: `store/${slug}`, accessToken });\n}\n\n// VENDOR\nexport function getVendors() {\n  return getRequest({ url: `vendor` });\n}\n\nexport function getVendorData(id: string) {\n  return getRequest({ url: `vendor/${id}` });\n}\n\nexport function getVendorFavorites(id: string) {\n  return getRequest({ url: `vendor/${id}/favorites` });\n}\n\nexport function addFavorite(\n  id: string,\n  product_id: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return postRequest({\n    url: `vendor/${id}/favorites`,\n    body: { product_id },\n    accessToken,\n  });\n}\n\nexport function removeFavorite(\n  id: string,\n  product_id: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return deleteRequest({\n    url: `vendor/${id}/favorites`,\n    body: { product_id },\n    accessToken,\n  });\n}\n\nexport function getVendorFriends(id: string) {\n  return getRequest({ url: `vendor/${id}/friends` });\n}\n\n// ORDERS\nexport function getOrders() {\n  return getRequest({ url: `orders` });\n}\n\nexport function makePurchase(\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return postRequest({\n    url: `orders`,\n    body: { product, buyer },\n    accessToken,\n  });\n}\n\nexport function makeOffer(\n  product: string,\n  buyer: string,\n  amount: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return postRequest({\n    url: `orders`,\n    body: { product, buyer, amount },\n    accessToken,\n  });\n}\n\nexport function acceptOffer(\n  id: string,\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return putRequest({\n    url: `orders/${id}`,\n    body: { product, buyer, status: \"ACCEPTED\" },\n    accessToken,\n  });\n}\n\nexport function declineOffer(\n  id: string,\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return putRequest({\n    url: `orders/${id}`,\n    body: { product, buyer, status: \"DENIED\" },\n    accessToken,\n  });\n}\n\nexport function completePayment(\n  id: string,\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"]\n) {\n  return putRequest({\n    url: `orders/${id}`,\n    body: { product, buyer, status: \"COMPLETED\" },\n    accessToken,\n  });\n}\n\nexport function updateOrder(\n  id: string,\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"],\n  amount?: string,\n  status?: string\n) {\n  return putRequest({\n    url: `orders/${id}`,\n    body: { product, buyer, status, amount },\n    accessToken,\n  });\n}\n\nexport function createOrder(\n  product: string,\n  buyer: string,\n  accessToken: AccessToken[\"accessToken\"],\n  amount?: string\n) {\n  return postRequest({\n    url: `orders`,\n    body: { product, buyer, amount },\n    accessToken,\n  });\n}\n\nexport function deleteOrder(id: string, accessToken: string) {\n  return deleteRequest({\n    url: `orders/${id}`,\n    accessToken,\n  });\n}\n\nexport function getOrderDetail(id: string) {\n  return getRequest({ url: `orderdetail/${id}` });\n}\n\nexport function createOrderDetail(\n  accessToken: AccessToken[\"accessToken\"],\n  order: string,\n  full_name: string,\n  email: string,\n  phone_number: string,\n  country: string,\n  town_or_city: string,\n  street_address1: string,\n  street_address2?: string,\n  county?: string,\n  stripe_pid?: string,\n  zipcode?: string\n) {\n  return postRequest({\n    url: `orderdetail`,\n    body: {\n      order,\n      full_name,\n      email,\n      phone_number,\n      country,\n      town_or_city,\n      street_address1,\n      street_address2,\n      county,\n      zipcode,\n      stripe_pid,\n    },\n    accessToken,\n  });\n}\n\nexport function updateOrderDetail(\n  id: string,\n  accessToken: AccessToken[\"accessToken\"],\n  order: string,\n  full_name?: string,\n  email?: string,\n  phone_number?: string,\n  country?: string,\n  town_or_city?: string,\n  street_address1?: string,\n  street_address2?: string,\n  county?: string,\n  stripe_pid?: string,\n  zipcode?: string\n) {\n  return putRequest({\n    url: `orderdetail/${id}`,\n    body: {\n      order,\n      full_name,\n      email,\n      phone_number,\n      country,\n      town_or_city,\n      street_address1,\n      street_address2,\n      county,\n      zipcode,\n      stripe_pid,\n    },\n    accessToken,\n  });\n}\n","import React from \"react\";\n\nimport { useUserContext } from \"./user.context\";\n\nimport {\n  deleteRequest,\n  putRequest,\n  getRequest,\n  postRequest,\n} from \"../services/crud.service\";\n\nimport {\n  getVendorData,\n  getVendorFavorites,\n  addFavorite,\n  removeFavorite,\n  makePurchase,\n  makeOffer,\n  acceptOffer,\n  declineOffer,\n  completePayment,\n  createOrder,\n  updateOrder,\n} from \"../services/get.service\";\n\nconst VENDOR_FAVORITES_ENDPOINT = \"vendor/<id>/favorites/</id>\";\nconst VENDOR_PROFILE_ENDPOINT = \"vendor/\";\n\nimport {\n  OrderTypeParamList,\n  VendorTypeParamList,\n  ProductTypeParamList,\n} from \"../types\";\n\nexport type VendorParams = VendorTypeParamList;\n\n/**\n * Third-level Context provider for all user-specific snipetts and collections data.\n * Relies on UserContext's username upon login to fetch user's data.\n *\n * @since 2021-04-08\n */\n\nexport enum VendorActionTypes {\n  fetchVendor,\n  fetchVendorSuccess,\n  fetchVendorFailure,\n  fetchVendorFaves,\n  fetchVendorOrderRequests,\n  fetchVendorOrdersMade,\n}\n\nexport interface FetchVendorAction {\n  type: VendorActionTypes;\n  vendor?: VendorParams;\n  favorites?: ProductTypeParamList;\n  order_requests?: OrderTypeParamList;\n  orders_made?: OrderTypeParamList;\n  error?: object;\n}\n\nexport interface StateInterface {\n  vendor?: VendorParams;\n  loading: boolean;\n  error?: object;\n}\n\nconst initialState: StateInterface = {\n  vendor: undefined,\n  loading: false,\n  error: {},\n};\n\ntype VendorDataType = {\n  vendorFaves: ProductTypeParamList[] | [];\n  vendorFavoritesFeed: ProductTypeParamList[] | [];\n  // setVendorFaves: React.Dispatch<\n  //   React.SetStateAction<VendorParams[\"favorites\"] | []>\n  // >;\n  orderRequests: OrderTypeParamList[] | [];\n  // setOrderRequests: React.Dispatch<\n  //   React.SetStateAction<OrderTypeParamList[] | []>\n  // >;\n  ordersMade: OrderTypeParamList[] | [];\n  // setOrdersMade: React.Dispatch<\n  //   React.SetStateAction<OrderTypeParamList[] | []>\n  // >;\n  vendorProducts: ProductTypeParamList[] | [];\n  // setVendorProducts: React.Dispatch<\n  //   React.SetStateAction<ProductTypeParamList[] | []>\n  // >;\n\n  vendor: VendorParams | undefined;\n  loading: boolean;\n  error: {} | undefined;\n  vendorId: string | undefined;\n  setVendorId: React.Dispatch<React.SetStateAction<string | undefined>>;\n\n  dispatch: React.Dispatch<FetchVendorAction>;\n  // loadFavorites: () => Promise<void>;\n  // loadOrderRequests: () => Promise<void>;\n  // loadOrdersMade: () => Promise<void>;\n  // loadProducts: () => Promise<void>;\n  loadVendor: () => Promise<void>;\n  loadVendorFaves(id: string): Promise<void>;\n  loadVendorFavorites(id: string): Promise<void>;\n};\n\nconst VendorData = React.createContext<VendorDataType>(undefined!);\n\nexport default function VendorDataProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [vendorId, setVendorId] = React.useState<string | undefined>(\n    undefined!\n  );\n  const [vendorProducts, setVendorProducts] = React.useState<\n    ProductTypeParamList[] | []\n  >([]);\n  const [vendorFavoritesFeed, setVendorFavoritesFeed] = React.useState<\n    ProductTypeParamList[] | []\n  >([]);\n  const [vendorFaves, setVendorFaves] = React.useState<\n    VendorParams[\"favorites\"] | []\n  >([]);\n  const [orderRequests, setOrderRequests] = React.useState<\n    OrderTypeParamList[] | []\n  >([]);\n  const [ordersMade, setOrdersMade] = React.useState<OrderTypeParamList[] | []>(\n    []\n  );\n\n  const [state, dispatch] = React.useReducer(\n    (\n      state: StateInterface,\n      {\n        type,\n        vendor,\n        favorites,\n        order_requests,\n        orders_made,\n        error,\n      }: FetchVendorAction\n    ) => {\n      switch (type) {\n        case VendorActionTypes.fetchVendor:\n          return { ...state, loading: true };\n\n        case VendorActionTypes.fetchVendorSuccess:\n          return { ...state, vendor, loading: false };\n\n        case VendorActionTypes.fetchVendorFailure:\n          return { ...state, error: error, loading: false };\n\n        case VendorActionTypes.fetchVendorFaves:\n          return {\n            ...state,\n            loading: false,\n            favorites: favorites,\n          };\n        case VendorActionTypes.fetchVendorOrdersMade:\n          return {\n            ...state,\n            orders_made: orders_made,\n          };\n        case VendorActionTypes.fetchVendorOrderRequests:\n          return {\n            ...state,\n            order_requests: order_requests,\n          };\n\n        default:\n          return state;\n      }\n    },\n    initialState\n  );\n\n  async function loadVendor() {\n    dispatch({ type: VendorActionTypes.fetchVendor });\n\n    try {\n      const response = await getRequest({ url: `vendor/${vendorId}` });\n      const vendorData = await response.json();\n      dispatch({\n        type: VendorActionTypes.fetchVendorSuccess,\n        vendor: vendorData,\n      });\n    } catch (e) {\n      dispatch({ type: VendorActionTypes.fetchVendorFailure });\n    }\n  }\n\n  const { vendor, loading, error } = state;\n\n  async function loadVendorFavorites(id: string) {\n    dispatch({ type: VendorActionTypes.fetchVendor });\n    const response: ProductTypeParamList = await getVendorFavorites(id);\n    if (response) {\n      dispatch({\n        type: VendorActionTypes.fetchVendorFaves,\n        favorites: response,\n      });\n    }\n  }\n\n  async function loadVendorFaves(id: string) {\n    const response = await getVendorFavorites(id);\n    if (response) {\n      setVendorFavoritesFeed(response);\n    }\n  }\n\n  React.useEffect(() => {\n    if (vendor && vendor.products.length > 0) {\n      setVendorProducts(vendor.products);\n    }\n  }, [vendor]);\n\n  React.useEffect(() => {\n    if (vendor) {\n      if (vendor.id) {\n        setVendorId(vendor.id.toString());\n      }\n      if (vendor.order_requests.length > 0) {\n        setOrderRequests(vendor.order_requests);\n      }\n      if (vendor.orders_made.length > 0) {\n        setOrdersMade(vendor.orders_made);\n      }\n      if (vendor.products.length > 0) {\n        setVendorProducts(vendor.products);\n      }\n      if (vendor.favorites.length > 0) {\n        setVendorFaves(vendor.favorites);\n      }\n    }\n  }, [vendor]);\n\n  return (\n    <VendorData.Provider\n      value={{\n        vendor,\n        loading,\n        error,\n        dispatch,\n        vendorId,\n        setVendorId,\n        loadVendor,\n        orderRequests,\n        ordersMade,\n        vendorProducts,\n        vendorFaves,\n        loadVendorFaves,\n        vendorFavoritesFeed,\n        loadVendorFavorites,\n      }}\n    >\n      {children}\n    </VendorData.Provider>\n  );\n}\n\nexport const useVendorData = () => React.useContext(VendorData);\n","/* eslint-disable no-console */\nimport * as React from \"react\";\n\nimport * as Navigator from \"../navigation/rootNavigator\";\nimport { Toast } from \"../components/common/toast\";\nimport { useToast, IToastProps } from \"native-base\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useLinkTo } from \"@react-navigation/native\";\nimport { StackNavigationProp, StackScreenProps } from \"@react-navigation/stack\";\nimport { AuthResponseType } from \"../types\";\nimport { localStorage } from \"../utils/storage\";\nimport { nativeStorage } from \"../utils/nativeStorage\";\nimport {\n  signInRequest,\n  signUpRequest,\n  signOutRequest,\n} from \"../services/auth.service\";\n\nimport { deleteRequest } from \"../services/crud.service\";\nimport { useVendorData, VendorActionTypes } from \"./vendor.context\";\nimport { useAuth, AccountActionTypes } from \"./auth.context\";\n\n/**\n * Top-most Context provider for all user authentication: form values, auth errors etc.\n *\n */\n\nexport type UserContent = {\n  userId: number | string;\n  setUserId: React.Dispatch<React.SetStateAction<number | string>>;\n  username: string;\n  setUsername: React.Dispatch<React.SetStateAction<string>>;\n  email: string;\n  setEmail: React.Dispatch<React.SetStateAction<string>>;\n\n  loading: boolean;\n  setLoading?: React.Dispatch<React.SetStateAction<boolean>>;\n  password: string;\n  setPassword: React.Dispatch<React.SetStateAction<string>>;\n  heading: string;\n  setHeading: React.Dispatch<React.SetStateAction<string>>;\n  alert: boolean;\n  setAlert: React.Dispatch<React.SetStateAction<boolean>>;\n  returning: boolean;\n  setReturning: React.Dispatch<React.SetStateAction<boolean>>;\n  handleSignIn: (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => Promise<void>;\n  handleSignOut: (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => Promise<void>;\n  handleDelete: (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => Promise<void>;\n};\n\nexport const UserContext = React.createContext<UserContent>(undefined!);\n\nexport default function UserProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const { dispatch: vendorDispatch, setVendorId } = useVendorData();\n  // const { dispatch: authDispatch, state, actions } = useAuth();\n\n  const [userId, setUserId] = React.useState<number | string>(0);\n  const [username, setUsername] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n\n  const [loading, setLoading] = React.useState(false);\n\n  const [password, setPassword] = React.useState(\"\");\n  const [heading, setHeading] = React.useState(\"\");\n  const [alert, setAlert] = React.useState(false);\n  const [returning, setReturning] = React.useState(true);\n\n  const [openSuccess, setOpenSuccess] = React.useState(false);\n  const [openWarning, setOpenWarning] = React.useState(false);\n  const [openError, setOpenError] = React.useState(false);\n\n  const [message, setMessage] = React.useState<string | any>(\"\");\n  const onSuccess = (text: string | any) => {\n    setMessage(text);\n    setOpenSuccess(true);\n    setTimeout(() => {\n      setOpenSuccess(false);\n      setMessage(\"\");\n    }, 1750);\n  };\n  const onWarning = (text: string | any) => {\n    setMessage(text);\n    setOpenWarning(true);\n    setTimeout(() => {\n      setOpenWarning(false);\n      setMessage(\"\");\n    }, 1750);\n  };\n  const onError = (text: string | any) => {\n    setMessage(text);\n    setOpenError(true);\n    setTimeout(() => {\n      setOpenError(false);\n      setMessage(\"\");\n    }, 1750);\n  };\n\n  const handleSignIn = async (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => {\n    // authDispatch({\n    //   type: AccountActionTypes.fetchAccount,\n    // });\n    vendorDispatch({ type: VendorActionTypes.fetchVendor });\n\n    if (!returning) {\n      try {\n        await signUpRequest({\n          body: {\n            username,\n            email,\n            password,\n          },\n        }).then((response) => {\n          if (response.ok) {\n            response.json().then((data: AuthResponseType) => {\n              if (data.access) {\n                setEmail(\"\");\n                setPassword(\"\");\n\n                setUsername(data.user.name);\n                setUserId(data.user.id);\n\n                setVendorId(data.user.id.toString());\n\n                // authDispatch({\n                //   type: AccountActionTypes.fetchAccountSignUp,\n                //   accessToken: data.access,\n                // });\n\n                // actions.register(data.access);\n\n                vendorDispatch({\n                  type: VendorActionTypes.fetchVendorSuccess,\n                  vendor: data.user,\n                });\n\n                setTimeout(() => {\n                  onSuccess(\"Account Created\");\n                }, 750);\n                setTimeout(() => {\n                  setLoading(false);\n                }, 1500);\n              }\n            });\n          } else {\n            response.json().then((data) => {\n              if (data.message) {\n                setLoading(false);\n\n                // authDispatch({\n                //   type: AccountActionTypes.fetchAccountTokenFailure,\n                //   accessToken: null,\n                // });\n                // actions.blacklist();\n\n                vendorDispatch({ type: VendorActionTypes.fetchVendorFailure });\n\n                onWarning(data.message);\n              }\n            });\n          }\n        });\n      } catch (err: any) {\n        setLoading(false);\n\n        // authDispatch({\n        //   type: AccountActionTypes.fetchAccountTokenFailure,\n        //   accessToken: null,\n        // });\n        // actions.blacklist();\n\n        vendorDispatch({ type: VendorActionTypes.fetchVendorFailure });\n\n        console.log(err?.message || \"Something went wrong.\");\n      }\n    } else {\n      try {\n        await signInRequest({\n          body: {\n            username,\n            password,\n          },\n        }).then((response) => {\n          if (response.ok) {\n            response.json().then((data: AuthResponseType) => {\n              if (data.access) {\n                setUsername(\"\");\n\n                setPassword(\"\");\n\n                setUsername(data.user.name);\n                setUserId(data.user.id);\n\n                // actions.register(data.access);\n\n                // authDispatch({\n                //   type: AccountActionTypes.fetchAccountSignIn,\n                //   accessToken: data.access,\n                // });\n\n                vendorDispatch({\n                  type: VendorActionTypes.fetchVendorSuccess,\n                  vendor: data.user,\n                });\n\n                setTimeout(() => {\n                  onSuccess(`Welcome Back, ${data.user.name}`);\n                }, 750);\n                setTimeout(() => {\n                  setLoading(false);\n                  // navigation.navigate(\"Home\");\n                }, 1500);\n              } else {\n                setLoading(false);\n\n                // authDispatch({\n                //   type: AccountActionTypes.fetchAccountTokenFailure,\n                //   accessToken: null,\n                // });\n\n                // actions.blacklist();\n\n                vendorDispatch({ type: VendorActionTypes.fetchVendorFailure });\n\n                console.log(\"Access Failed\");\n              }\n            });\n          } else {\n            response.json().then((data) => {\n              if (data.message) {\n                setLoading(false);\n\n                // authDispatch({\n                //   type: AccountActionTypes.fetchAccountTokenFailure,\n                // });\n                // actions.blacklist();\n\n                vendorDispatch({\n                  type: VendorActionTypes.fetchVendorFailure,\n                  error: data.message,\n                });\n\n                console.log(\"Request failed\");\n              }\n            });\n          }\n        });\n      } catch (err: any) {\n        setLoading(false);\n\n        // authDispatch({\n        //   type: AccountActionTypes.fetchAccountTokenFailure,\n        // });\n        // actions.blacklist();\n\n        vendorDispatch({\n          type: VendorActionTypes.fetchVendorFailure,\n          error: err,\n        });\n\n        console.log(err.message);\n      }\n    }\n  };\n\n  const handleSignOut = async (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => {\n    setLoading(true);\n\n    const localToken = await localStorage.getToken();\n\n    try {\n      await signOutRequest({\n        accessToken: localToken,\n      }).then((response) => {\n        if (response.ok) {\n          setUsername(\"\");\n          setUserId(\"\");\n\n          setReturning(true);\n\n          // actions.blacklist();\n\n          setTimeout(() => {\n            onSuccess(\"Signed Out\");\n          }, 250);\n          setTimeout(() => {\n            setLoading(false);\n            // navigation.navigate(`/`);\n          }, 750);\n        } else {\n          setLoading(false);\n          console.log(\"Sign Out Failed\");\n        }\n      });\n    } catch (err: any) {\n      setLoading(false);\n      console.log(err.message);\n    }\n  };\n\n  const handleDelete = async (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => {\n    setLoading(true);\n    try {\n      await deleteRequest({\n        url: `account/${userId}`,\n        accessToken: \"\",\n      }).then((res) => {\n        if (res.ok) {\n          setUsername(\"\");\n          setUserId(\"\");\n\n          setTimeout(() => {\n            onSuccess(\"Account Deleted\");\n          }, 750);\n          setTimeout(() => {\n            setLoading(false);\n          }, 1500);\n        } else {\n          setLoading(false);\n          onWarning(\"Request Failed\");\n        }\n      });\n    } catch (err: any) {\n      setLoading(false);\n      onError(err.message);\n    }\n  };\n\n  // React.useEffect(() => {\n  //   if (!(username || accessToken)) {\n  //     navigation.navigate(\"/\");\n  //   }\n  // }, [username, accessToken]);\n\n  return (\n    <UserContext.Provider\n      value={{\n        userId,\n        setUserId,\n        username,\n        setUsername,\n        email,\n        setEmail,\n\n        loading,\n        setLoading,\n        handleSignIn,\n        handleSignOut,\n        handleDelete,\n        password,\n        setPassword,\n        heading,\n        setHeading,\n        alert,\n        setAlert,\n        returning,\n        setReturning,\n      }}\n    >\n      {children}\n      {/* <Toast\n        open={openSuccess}\n        setOpen={setOpenSuccess}\n        success\n        message={message}\n      />\n      <Toast\n        open={openWarning}\n        setOpen={setOpenWarning}\n        warning\n        message={message}\n      />\n      <Toast open={openError} setOpen={setOpenError} error message={message} /> */}\n    </UserContext.Provider>\n  );\n}\n\nexport const useUserContext = () => React.useContext(UserContext);\n","import React from \"react\";\n\nexport type AuthDataType = {\n  signIn: (username: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  signUp: (username: string, email: string, password: string) => Promise<void>;\n  isSignedOut: boolean;\n  isSignedIn: boolean;\n  isLoading: boolean;\n  noAccount: boolean;\n  userToken: string | null;\n  state: AuthStateInterface;\n};\n\nexport const AuthContext = React.createContext<AuthDataType>(undefined!);\n\nexport enum AuthActionTypes {\n  TO_SIGNUP_PAGE,\n  TO_SIGNIN_PAGE,\n  RESTORE_TOKEN,\n  SIGNED_UP,\n  SIGN_IN,\n  SIGN_OUT,\n}\n\nexport interface AuthAction {\n  type: AuthActionTypes;\n  token: null | string;\n}\n\nexport type AuthStateInterface = {\n  isLoading: boolean;\n  isSignedOut: boolean;\n  isSignedUp: boolean;\n  isSignedIn: boolean;\n  noAccount: boolean;\n  userToken: null | string;\n};\n\nexport const initialState = {\n  isLoading: true,\n  isSignedOut: false,\n  isSignedUp: false,\n  noAccount: false,\n  isSignedIn: false,\n  userToken: null,\n};\n\nexport const authReducer = (\n  prevState = initialState,\n  action: AuthAction\n): AuthStateInterface => {\n  switch (action.type) {\n    case AuthActionTypes.TO_SIGNUP_PAGE:\n      return {\n        ...prevState,\n        isLoading: false,\n        isSignedUp: false,\n        noAccount: true,\n      };\n    case AuthActionTypes.TO_SIGNIN_PAGE:\n      return {\n        ...prevState,\n        isLoading: false,\n        isSignedIn: false,\n        noAccount: false,\n      };\n    case AuthActionTypes.RESTORE_TOKEN:\n      return {\n        ...prevState,\n        userToken: action.token,\n        isLoading: false,\n      };\n    case AuthActionTypes.SIGNED_UP:\n      return {\n        ...prevState,\n        isSignedIn: true,\n        isSignedUp: true,\n        isLoading: false,\n        userToken: action.token,\n      };\n    case AuthActionTypes.SIGN_IN:\n      return {\n        ...prevState,\n        isSignedOut: false,\n        isSignedIn: true,\n        isSignedUp: true,\n        userToken: action.token,\n      };\n    case AuthActionTypes.SIGN_OUT:\n      return {\n        ...prevState,\n        isSignedOut: true,\n      };\n  }\n};\n\nexport const stateConditionString = (state: AuthStateInterface) => {\n  let navigateTo = \"\";\n  if (state.isLoading) {\n    navigateTo = \"LOAD_APP\";\n  }\n  if (state.isSignedIn && state.userToken && state.isSignedUp) {\n    navigateTo = \"LOAD_HOME\";\n  }\n  if (!state.isSignedUp && state.noAccount) {\n    navigateTo = \"LOAD_SIGNUP\";\n  }\n  if (!state.isSignedIn && !state.noAccount) {\n    navigateTo = \"LOAD_SIGNIN\";\n  }\n  return navigateTo;\n};\n","import React, { Fragment } from \"react\";\nimport { NativeSyntheticEvent, TextInputChangeEventData } from \"react-native\";\n\nimport { useController, useForm } from \"react-hook-form\";\nimport { Button, Checkbox, List, TextInput } from \"react-native-paper\";\nimport { FormBuilder } from \"react-native-paper-form-builder\";\nimport { LogicProps } from \"react-native-paper-form-builder/dist/Types/Types\";\nimport { useUserContext } from \"../../context/user.context\";\n\nimport { AuthContext } from \"../../context/authUtils\";\n\nexport function SignIn() {\n  const {\n    username,\n    setUsername,\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSignIn,\n    returning,\n    setReturning,\n  } = useUserContext();\n\n  const { signIn, signUp } = React.useContext(AuthContext);\n\n  const handleSignInn = (\n    e: React.BaseSyntheticEvent<React.FunctionComponent>\n  ) => {\n    signIn(username, password);\n  };\n\n  const { control, setFocus, handleSubmit } = useForm({\n    defaultValues: {\n      username: \"\",\n      // email: \"\",\n      password: \"\",\n      rememberMe: \"checked\",\n    },\n    mode: \"onChange\",\n  });\n\n  const onUsernameChange = (\n    event: NativeSyntheticEvent<TextInputChangeEventData>\n  ) => {\n    const value = event.nativeEvent.text;\n    if (value === \"\") {\n      setUsername(\"\");\n    }\n    setUsername(value);\n  };\n\n  // const onEmailChange = (\n  //   event: NativeSyntheticEvent<TextInputChangeEventData>\n  // ) => {\n  //   const value = event.nativeEvent.text;\n  //   if (value === \"\") {\n  //     setEmail(\"\");\n  //   }\n  //   setEmail(value);\n  // };\n\n  const onPasswordChange = (\n    event: NativeSyntheticEvent<TextInputChangeEventData>\n  ) => {\n    const value = event.nativeEvent.text;\n    if (value === \"\") {\n      setPassword(\"\");\n    }\n    setPassword(value);\n  };\n\n  return (\n    <Fragment>\n      <FormBuilder\n        control={control}\n        setFocus={setFocus}\n        formConfigArray={[\n          {\n            name: \"username\",\n            type: \"text\",\n            textInputProps: {\n              label: \"Username\",\n              left: <TextInput.Icon name={\"account\"} />,\n              value: username,\n              onChange: onUsernameChange,\n            },\n            rules: {\n              required: {\n                value: true,\n                message: \"Username is required\",\n              },\n            },\n          },\n          // {\n          //   name: \"email\",\n          //   type: \"email\",\n          //   textInputProps: {\n          //     label: \"Email\",\n          //     left: <TextInput.Icon name={\"email\"} />,\n          //     value: email,\n          //     onChange: onEmailChange,\n          //   },\n          //   rules: {\n          //     required: {\n          //       value: true,\n          //       message: \"Email is required\",\n          //     },\n          //     pattern: {\n          //       value:\n          //         /[A-Za-z0-9._%+-]{3,}@[a-zA-Z]{3,}([.]{1}[a-zA-Z]{2,}|[.]{1}[a-zA-Z]{2,}[.]{1}[a-zA-Z]{2,})/,\n          //       message: \"Email is invalid\",\n          //     },\n          //   },\n          // },\n          {\n            name: \"password\",\n            type: \"password\",\n            textInputProps: {\n              label: \"Password\",\n              left: <TextInput.Icon name={\"lock\"} />,\n              value: password,\n              onChange: onPasswordChange,\n            },\n            rules: {\n              required: {\n                value: true,\n                message: \"Password is required\",\n              },\n              minLength: {\n                value: 4,\n                message: \"Password should be atleast 4 characters\",\n              },\n              maxLength: {\n                value: 30,\n                message: \"Password should be between 8 and 30 characters\",\n              },\n            },\n          },\n        ]}\n      />\n      <Button mode={\"contained\"} onPress={handleSubmit(handleSignInn)}>\n        Submit\n      </Button>\n    </Fragment>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { TouchableOpacity, StyleSheet, View } from \"react-native\";\nimport {\n  Text,\n  useTheme,\n  TextInput,\n  Button,\n  Surface,\n  Headline,\n} from \"react-native-paper\";\nimport Background from \"../../components/common/background\";\n\nimport Header from \"../../components/common/header\";\nimport BackButton from \"../../components/common/backButton\";\nimport { emailValidator } from \"../../utils/emailValidator\";\nimport { passwordValidator } from \"../../utils/passwordValidator\";\n\nimport { useUserContext } from \"../../context/user.context\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { AccountStackNavigatorParamList } from \"../../types\";\nimport { SignIn } from \"../../components/account/accounSign\";\nexport default function LoginScreen({\n  navigation,\n}: {\n  navigation: StackNavigationProp<AccountStackNavigatorParamList>;\n}) {\n  const theme = useTheme();\n  // const { username, setUsername, email, setEmail, password, setPassword } = useUserContext()\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\n  const [password, setPassword] = useState({ value: \"\", error: \"\" });\n\n  const onLoginPressed = () => {\n    const emailError = emailValidator(email.value);\n    const passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail({ ...email, error: emailError });\n      setPassword({ ...password, error: passwordError });\n      return;\n    }\n    navigation.reset({\n      index: 0,\n      routes: [{ name: \"Dashboard\" }],\n    });\n  };\n\n  return (\n    <Background>\n      <TouchableOpacity onPress={() => navigation.goBack} />\n\n      <Headline>Welcomggge back.</Headline>\n      <SignIn />\n      {/* <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={(text: string) => setEmail({ value: text, error: \"\" })}\n        error={!!email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n      <TextInput\n        label=\"Password\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={(text) => setPassword({ value: text, error: \"\" })}\n        error={!!password.error}\n        secureTextEntry\n      />\n      <View style={styles.forgotPassword}>\n        <TouchableOpacity onPress={() => navigation.navigate(\"ResetPassword\")}>\n          <Text style={{ fontSize: 13, color: theme.colors.text }}>\n            Forgot your password?\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <Button mode=\"contained\" onPress={onLoginPressed}>\n        Login\n      </Button>\n      <View style={styles.row}>\n        <Text>Don’t have an account? </Text>\n        <TouchableOpacity onPress={() => navigation.replace(\"RegisterScreen\")}>\n          <Text style={{ fontWeight: \"bold\", color: theme.colors.primary }}>\n            Sign up\n          </Text>\n        </TouchableOpacity> */}\n      {/* </View> */}\n    </Background>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    flex: 1,\n    padding: 20,\n  },\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24,\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4,\n  },\n});\n","import React from \"react\";\nimport { StyleSheet, TextInputProps } from \"react-native\";\nimport { Text, useTheme } from \"react-native-paper\";\n\nexport default function Header({ children }: { children: React.ReactNode }) {\n  const theme = useTheme();\n  return (\n    <Text\n      style={{\n        fontSize: 21,\n        color: theme.colors.primary,\n        fontWeight: \"bold\",\n        paddingVertical: 12,\n      }}\n    >\n      {children}{\" \"}\n    </Text>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { Text, TextInput, Button, useTheme } from \"react-native-paper\";\n\n// import TextInput from \"../../components/common/TextInput\";\nimport BackButton from \"../../components/common/BackButton\";\nimport Background from \"../../components/common/Background\";\nimport Header from \"../../components/common/Header\";\n\nimport { emailValidator } from \"../../utils/emailValidator\";\nimport { passwordValidator } from \"../../utils/passwordValidator\";\nimport { nameValidator } from \"../../utils/nameValidator\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { AccountStackNavigatorParamList } from \"../../types\";\n\nexport default function RegisterScreen({\n  navigation,\n}: {\n  navigation: StackNavigationProp<AccountStackNavigatorParamList>;\n}) {\n  const theme = useTheme();\n  const [name, setName] = useState({ value: \"\", error: \"\" });\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\n  const [password, setPassword] = useState({ value: \"\", error: \"\" });\n\n  const onSignUpPressed = () => {\n    const nameError = nameValidator(name.value);\n    const emailError = emailValidator(email.value);\n    const passwordError = passwordValidator(password.value);\n    if (emailError || passwordError || nameError) {\n      setName({ ...name, error: nameError });\n      setEmail({ ...email, error: emailError });\n      setPassword({ ...password, error: passwordError });\n      return;\n    }\n    navigation.reset({\n      index: 0,\n      routes: [{ name: \"Dashboard\" }],\n    });\n  };\n\n  return (\n    <Background>\n      <TouchableOpacity onPress={navigation.goBack} />\n\n      <Header>Create Account</Header>\n      <TextInput\n        label=\"Name\"\n        returnKeyType=\"next\"\n        value={name.value}\n        onChangeText={(text) => setName({ value: text, error: \"\" })}\n        error={!!name.error}\n        // errorText={name.error}\n      />\n      <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: \"\" })}\n        error={!!email.error}\n        // errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n      <TextInput\n        label=\"Password\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={(text) => setPassword({ value: text, error: \"\" })}\n        error={!!password.error}\n        // errorText={password.error}\n        secureTextEntry\n      />\n      <Button\n        mode=\"contained\"\n        onPress={onSignUpPressed}\n        style={{ marginTop: 24 }}\n      >\n        Sign Up\n      </Button>\n      <View style={styles.row}>\n        <Text>Already have an account? </Text>\n        <TouchableOpacity onPress={() => navigation.replace(\"LoginScreen\")}>\n          <Text style={{ fontWeight: \"bold\", color: theme.colors.primary }}>\n            Login\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </Background>\n  );\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4,\n  },\n});\n","export function nameValidator(name) {\n  if (!name) return \"Name can't be empty.\"\n  return ''\n}\n","import React, { useState } from \"react\";\nimport {\n  Text,\n  TextInput,\n  Button,\n  useTheme,\n  TouchableRipple,\n} from \"react-native-paper\";\n\nimport BackButton from \"../../components/common/BackButton\";\nimport Background from \"../../components/common/Background\";\nimport Header from \"../../components/common/Header\";\n\nimport { emailValidator } from \"../../utils/emailValidator\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { AccountStackNavigatorParamList } from \"../../types\";\n\nexport default function ResetPasswordScreen({\n  navigation,\n}: {\n  navigation: StackNavigationProp<AccountStackNavigatorParamList>;\n}) {\n  const theme = useTheme();\n  const [email, setEmail] = useState({ value: \"\", error: \"\" });\n\n  const sendResetPasswordEmail = () => {\n    const emailError = emailValidator(email.value);\n    if (emailError) {\n      setEmail({ ...email, error: emailError });\n      return;\n    }\n    navigation.navigate(\"LoginScreen\");\n  };\n\n  return (\n    <Background>\n      <TouchableRipple onPress={navigation.goBack}>Go Back</TouchableRipple>\n\n      <Header>Restore Password</Header>\n      <TextInput\n        label=\"E-mail address\"\n        returnKeyType=\"done\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: \"\" })}\n        error={!!email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n        // description=\"You will receive email with password reset link.\"\n      />\n      <Button\n        mode=\"contained\"\n        onPress={sendResetPasswordEmail}\n        style={{ marginTop: 16 }}\n      >\n        Send Instructions\n      </Button>\n    </Background>\n  );\n}\n","import React from \"react\";\nimport { StyleSheet, TextInputProps } from \"react-native\";\nimport { Text } from \"react-native-paper\";\n\ninterface Props extends TextInputProps {\n  children: React.ReactNode;\n}\nexport default function Paragraph({ children, ...props }: Props) {\n  return (\n    <Text style={styles.text} {...props}>\n      {children}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 15,\n    lineHeight: 21,\n    textAlign: \"center\",\n    marginBottom: 12,\n  },\n});\n","import React from \"react\";\nimport Background from \"../../components/common/Background\";\nimport Header from \"../../components/common/Header\";\nimport Paragraph from \"../../components/common/Paragraph\";\n\nimport { Button } from \"react-native-paper\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { AccountStackNavigatorParamList } from \"../../types\";\n\nexport default function Dashboard({\n  navigation,\n}: {\n  navigation: StackNavigationProp<AccountStackNavigatorParamList>;\n}) {\n  return (\n    <Background>\n      <Header>Let’s start</Header>\n      <Paragraph>\n        Your amazing app starts here. Open you favorite code editor and start\n        editing this project.\n      </Paragraph>\n      <Button\n        mode=\"outlined\"\n        onPress={() =>\n          navigation.reset({\n            index: 0,\n            routes: [{ name: \"StartScreen\" }],\n          })\n        }\n      >\n        Logout\n      </Button>\n    </Background>\n  );\n}\n","import React from \"react\";\n\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport { DrawerNavigationProp } from \"@react-navigation/drawer\";\nimport { Appbar, Avatar, useTheme } from \"react-native-paper\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport { TouchableOpacity } from \"react-native\";\nimport { DEFAULT_AVATAR } from \"../constants/backend.constants\";\n\nimport {\n  StartScreen,\n  LoginScreen,\n  RegisterScreen,\n  ResetPasswordScreen,\n  Dashboard,\n} from \"../screens/account\";\n\nimport { AccountStackNavigatorParamList } from \"../types\";\n\nconst AccountStack = createStackNavigator<AccountStackNavigatorParamList>();\n\nexport const AccountStackNavigator = () => {\n  const theme = useTheme();\n  // console.log(AccountStack);\n\n  return (\n    <AccountStack.Navigator\n      initialRouteName=\"StartScreen\"\n      headerMode=\"screen\"\n      screenOptions={{\n        header: ({ scene, previous, navigation }) => {\n          const { options } = scene.descriptor;\n          const title =\n            options.headerTitle !== undefined\n              ? options.headerTitle\n              : options.title !== undefined\n              ? options.title\n              : scene.route.name;\n\n          return (\n            <Appbar.Header\n              theme={{ colors: { primary: theme.colors.surface } }}\n            >\n              {previous ? (\n                <Appbar.BackAction\n                  onPress={navigation.goBack}\n                  color={theme.colors.primary}\n                />\n              ) : (\n                <TouchableOpacity\n                  style={{ marginLeft: 10 }}\n                  onPress={() => {\n                    (\n                      navigation as any as DrawerNavigationProp<{}>\n                    ).openDrawer();\n                  }}\n                >\n                  <Avatar.Image\n                    size={40}\n                    source={{\n                      uri: DEFAULT_AVATAR,\n                    }}\n                  />\n                </TouchableOpacity>\n              )}\n\n              <Appbar.Content\n                title={\n                  title === \"StartScreen\" ? (\n                    <MaterialCommunityIcons\n                      style={{ marginRight: 10 }}\n                      name=\"package-variant-closed\"\n                      size={40}\n                      color={theme.colors.primary}\n                    />\n                  ) : (\n                    title\n                  )\n                }\n                titleStyle={{\n                  fontSize: 18,\n                  fontWeight: \"bold\",\n                  color: theme.colors.primary,\n                }}\n              />\n            </Appbar.Header>\n          );\n        },\n      }}\n    >\n      <AccountStack.Screen\n        name=\"StartScreen\"\n        component={StartScreen}\n        options={({ route }) => {\n          const routeName =\n            getFocusedRouteNameFromRoute(route) ?? \"StartScreen\";\n          return { headerTitle: routeName };\n        }}\n      />\n      <AccountStack.Screen\n        name=\"LoginScreen\"\n        component={LoginScreen}\n        options={{ headerTitle: \"Sign In\" }}\n      />\n      <AccountStack.Screen\n        name=\"RegisterScreen\"\n        component={RegisterScreen}\n        options={{ headerTitle: \"Register\" }}\n      />\n      <AccountStack.Screen\n        name=\"Dashboard\"\n        component={Dashboard}\n        options={{ headerTitle: \"Dashboard\" }}\n      />\n      <AccountStack.Screen\n        name=\"ResetPassword\"\n        component={ResetPasswordScreen}\n        options={{ headerTitle: \"Reset Password\" }}\n      />\n    </AccountStack.Navigator>\n  );\n};\n","import React from \"react\";\n\nimport { useUserContext } from \"./user.context\";\n\nimport {\n  deleteRequest,\n  putRequest,\n  getRequest,\n  postRequest,\n} from \"../services/crud.service\";\n\nimport { ProductStackNavigatorParamList } from \"../types\";\n\nexport type ProductParams = ProductStackNavigatorParamList[\"ProductDetails\"];\n/**\n * Third-level Context provider for all user-specific snipetts and collections data.\n * Relies on UserContext's username upon login to fetch user's data.\n *\n */\n\nexport enum ProductsActionTypes {\n  fetchProducts,\n  fetchProductsSuccess,\n  fetchProductsFailure,\n}\n\nexport interface FetchProductsAction {\n  type: ProductsActionTypes;\n  products?: ProductParams[];\n  error?: string;\n}\n\nexport interface ProductsStateInterface {\n  products?: ProductParams[] | [];\n  loading: boolean;\n  error?: string;\n}\n\nconst initialState: ProductsStateInterface = {\n  products: [],\n  loading: false,\n  error: \"\",\n};\n\ntype ProductsDataType = {\n  products: ProductParams[] | [] | undefined;\n  loading: boolean;\n  error: string | undefined;\n  dispatch: React.Dispatch<FetchProductsAction>;\n  loadProducts: () => Promise<void>;\n};\n\nconst ProductsData = React.createContext<ProductsDataType>(undefined!);\n\nexport default function ProductsDataProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [state, dispatch] = React.useReducer(\n    (\n      state: ProductsStateInterface,\n      { type, products, error }: FetchProductsAction\n    ) => {\n      switch (type) {\n        case ProductsActionTypes.fetchProducts:\n          return { ...state, loading: true };\n\n        case ProductsActionTypes.fetchProductsSuccess:\n          return { ...state, products, loading: false };\n\n        case ProductsActionTypes.fetchProductsFailure:\n          return { ...state, error: error, loading: false };\n\n        default:\n          return state;\n      }\n    },\n    initialState\n  );\n\n  async function loadProducts() {\n    dispatch({ type: ProductsActionTypes.fetchProducts });\n\n    const data = await getRequest({\n      url: `store/?expand=product_images,vendor,product,category&include=vendor.name`,\n    });\n    if (data) {\n      dispatch({\n        type: ProductsActionTypes.fetchProductsSuccess,\n        products: data,\n      });\n    } else {\n      dispatch({ type: ProductsActionTypes.fetchProductsFailure });\n    }\n\n    // try {\n    //   const response = await getRequest({\n    //     url: `store?expand=product_images,vendor,product,category&include=vendor.name`,\n    //   });\n    //   // const productsData = await response.json();\n    //   dispatch({\n    //     type: ProductsActionTypes.fetchProductsSuccess,\n    //     products: response,\n    //   });\n    // } catch (e) {\n    //   dispatch({ type: ProductsActionTypes.fetchProductsFailure });\n    // }\n  }\n\n  React.useEffect(() => {\n    loadProducts();\n  }, []);\n\n  const { products, loading, error } = state;\n\n  return (\n    <ProductsData.Provider\n      value={{\n        products,\n        loading,\n        error,\n        dispatch,\n        loadProducts,\n      }}\n    >\n      {children}\n    </ProductsData.Provider>\n  );\n}\n\nexport const useProductsData = () => React.useContext(ProductsData);\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\n/**\n * A date parser.\n *\n * Parses a date string and returns ... ago\n * Parses a date to ISO format to have acceptable time element\n * Date format from API is ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\n *\n * @requires dayjs\n * @requires dayjs/relativeTime\n * @link https://react-query.tanstack.com/\n * @file defines TimeAgo and TimeAgoProps\n * @since 7.18.21\n *\n */\n\n/**\n * TimeAgo component.\n *\n * @implements {TimeAgoProps}\n * @example\n * dayjs.extend(relativeTime);\n * dayjs('1999-01-01').fromNow(); // 20 years ago\n */\n\nexport const TimeAgo = ({ date }: { date: string }) => {\n  dayjs.extend(relativeTime);\n  return (\n    <time dateTime={dayjs(date).toISOString()}>{dayjs(date).fromNow()}</time>\n  );\n};\n","import _ from \"lodash\";\n\nexport const initialize = (name: string) => {\n  return name.charAt(0).toUpperCase() + name.charAt(1).toUpperCase();\n};\n\nexport const firstInitial = (name: string) => {\n  return name.charAt(0).toUpperCase();\n};\n\nexport function capitalize(str: string) {\n  return str.toLowerCase().replace(/^.| ./g, _.toUpper);\n}\n\nexport function capitalizeFirstLetter(str: string) {\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n}\n\nexport function normalizeUsername(username: string | undefined) {\n  if (!username || typeof username !== \"string\") return undefined;\n  return username.trim().toLowerCase();\n}\n\n// css utility\n// https://github.com/devhubapp/devhub/blob/6e31725a63f42986eb040153aec7eb11723b8289/landing/tailwind.config.js#L5\n\nexport function toKebabCase(str: string) {\n  if (!(str && typeof str === \"string\")) return \"\";\n\n  const matches = str.match(\n    /[A-Z]{2,}(?=[A-Z][a-z]+|\\b)|[A-Z]?[a-z]+|[A-Z]|[0-9]+/g\n  );\n  if (!(matches && matches.length)) return str;\n\n  return matches.map((s) => s.toLowerCase()).join(\"-\");\n}\n","import React from \"react\";\nimport {\n  DEFAULT_AVATAR,\n  DEFAULT_PLACEHOLDER,\n} from \"../constants/backend.constants\";\nimport { initialize } from \"../utils/initialize\";\nimport { useVendorData } from \"../context/vendor.context\";\n\nexport function useVendorIcon() {\n  const { vendor } = useVendorData();\n\n  const [vendorIcon, setVendorIcon] = React.useState<string | undefined>(\n    undefined\n  );\n  const [vendorInitials, setVendorInitials] = React.useState<\n    string | undefined\n  >(undefined);\n\n  React.useMemo(() => {\n    if (vendor) {\n      if (vendor.image) {\n        if (vendor.image.thumbnail) {\n          setVendorIcon(vendor.image.thumbnail);\n        } else {\n          setVendorIcon(vendor.image.full_size);\n        }\n      } else {\n        setVendorIcon(DEFAULT_AVATAR);\n      }\n      setVendorInitials(initialize(vendor.name));\n    }\n  }, [vendor]);\n\n  return {\n    vendorIcon,\n    vendorInitials,\n  };\n}\n","import React from \"react\";\nimport {\n  DEFAULT_AVATAR,\n  DEFAULT_PLACEHOLDER,\n} from \"../constants/backend.constants\";\n\nexport function useImagePlaceholder(image: ImagePreview) {\n  const [productImage, setProductImage] = React.useState<string | undefined>(\n    undefined\n  );\n\n  const [productThumbnail, setProductThumbnail] = React.useState<\n    string | undefined\n  >(undefined);\n\n  React.useMemo(() => {\n    if (image) {\n      if (image.thumbnail) {\n        setProductThumbnail(image.thumbnail);\n      } else {\n        if (image.full_size) {\n          setProductThumbnail(image.full_size);\n        }\n      }\n      if (image.full_size) {\n        setProductImage(image.full_size);\n      } else {\n        setProductImage(DEFAULT_PLACEHOLDER);\n      }\n    } else {\n      setProductThumbnail(DEFAULT_AVATAR);\n      setProductImage(DEFAULT_PLACEHOLDER);\n    }\n  }, [image]);\n\n  return {\n    productImage,\n    productThumbnail,\n  };\n}\n","import React from \"react\";\nimport {\n  DEFAULT_AVATAR,\n  DEFAULT_PLACEHOLDER,\n} from \"../constants/backend.constants\";\n\nexport function useAvatarPlaceholder(image: ImagePreview) {\n  const [avatarImage, setAvatarImage] = React.useState<string | undefined>(\n    undefined\n  );\n\n  React.useMemo(() => {\n    if (image) {\n      if (image.thumbnail) {\n        setAvatarImage(image.thumbnail);\n      } else {\n        if (image.full_size) {\n          setAvatarImage(image.full_size);\n        }\n      }\n    } else {\n      setAvatarImage(DEFAULT_AVATAR);\n    }\n  }, [image]);\n\n  return {\n    avatarImage,\n  };\n}\n","import React from \"react\";\nimport { StyleSheet, View, Image, TouchableOpacity } from \"react-native\";\nimport {\n  Surface,\n  Title,\n  Caption,\n  Text,\n  Avatar,\n  TouchableRipple,\n  Badge,\n  useTheme,\n  IconButton,\n  Button,\n  Chip,\n} from \"react-native-paper\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TimeAgo } from \"../common/time\";\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { useVendorIcon } from \"../../hooks/useVendorIcon\";\nimport { useImagePlaceholder } from \"../../hooks/useImagePlaceholder\";\nimport { useAvatarPlaceholder } from \"../../hooks/useAvatarPlaceholder\";\n\nimport { initialize } from \"../../utils/initialize\";\nimport {\n  ProductStackNavigatorParamList,\n  ProductTypeParamList,\n} from \"../../types\";\n\ntype Props = {\n  onPress?: (slug: string) => void;\n} & ProductStackNavigatorParamList[\"ProductDetails\"];\n\nexport const Product = (props: Props) => {\n  const product = props;\n  const onPress = props.onPress ? props.onPress : () => {};\n  const theme = useTheme();\n\n  const { vendorFaves } = useVendorData();\n\n  const { vendorIcon, vendorInitials } = useVendorIcon();\n\n  const { productImage, productThumbnail } = useImagePlaceholder(product.image);\n\n  const { avatarImage } = useAvatarPlaceholder(product.vendor.image);\n\n  const otherVendorInitials = initialize(product.vendor.name);\n\n  const inFavorites = vendorFaves.some(\n    (favorite: ProductTypeParamList) => favorite.id === product.id\n  );\n\n  console.log(\"productImage\", productImage);\n  console.log(\"productAvatar\", avatarImage);\n  console.log(\"otherVendorInitials\", otherVendorInitials);\n  console.log(\"vendorFaves\", vendorFaves);\n  console.log(\"inFaves\", inFavorites);\n\n  const iconColor = theme.colors.text;\n\n  const contentColor = theme.colors.text;\n\n  const imageBorderColor = theme.colors.text;\n\n  const randomColor = () => {\n    const hex = Math.floor(Math.random() * 0xffffff);\n    return `${hex.toString(16)}`;\n  };\n  const ran = randomColor();\n  const dom = randomColor();\n\n  return (\n    <TouchableRipple onPress={() => onPress(product.slug)}>\n      <Surface style={styles.container}>\n        <View style={styles.leftColumn}>\n          <View>\n            {avatarImage ? (\n              <Avatar.Image\n                size={60}\n                style={{ marginRight: 10 }}\n                source={{\n                  uri: avatarImage,\n                }}\n              />\n            ) : (\n              <Avatar.Text\n                size={60}\n                style={{ marginRight: 10 }}\n                label={otherVendorInitials}\n              />\n            )}\n\n            <Badge\n              size={10}\n              style={{\n                // ...styles.badge,\n                position: \"absolute\",\n                bottom: 0,\n                right: 4,\n                backgroundColor: product.vendor.online\n                  ? theme.colors.accent\n                  : theme.colors.disabled,\n              }}\n            />\n          </View>\n        </View>\n\n        <View style={styles.rightColumn}>\n          <View style={styles.topRow}>\n            <Title>{product.title}</Title>\n\n            {product.vendor.product_count > 0 && (\n              <View style={styles.iconContainer}>\n                <MaterialCommunityIcons\n                  name=\"package-variant-closed\"\n                  size={14}\n                  color={iconColor}\n                />\n                <Caption style={styles.iconDescription}>\n                  {product.vendor.product_count}\n                  {\"\"} products\n                </Caption>\n              </View>\n            )}\n\n            {product.vendor.order_count > 0 && (\n              <View style={styles.iconContainer}>\n                <MaterialCommunityIcons\n                  name=\"currency-usd-off\"\n                  size={14}\n                  color={iconColor}\n                />\n                <Caption style={styles.iconDescription}>\n                  {product.vendor.order_count}\n                  {\"\"} transactions\n                </Caption>\n              </View>\n            )}\n\n            <Caption style={styles.handle}>{product.price}</Caption>\n\n            <Caption>{product.condition}</Caption>\n            {!product.is_available && (\n              <Chip mode=\"flat\" style={{ backgroundColor: theme.colors.error }}>\n                SOLD\n              </Chip>\n            )}\n          </View>\n\n          <Text style={{ color: contentColor }}>{product.description}</Text>\n\n          <Image\n            source={{\n              uri: productImage,\n              // product.image.image.thumbnail\n            }}\n            style={[\n              styles.image,\n              {\n                borderColor: imageBorderColor,\n              },\n            ]}\n          />\n\n          <View style={styles.bottomRow}>\n            {product.is_available && (\n              <>\n                <TouchableOpacity\n                  onPress={() => {}}\n                  hitSlop={{ top: 10, bottom: 10 }}\n                >\n                  <View style={styles.iconContainer}>\n                    <IconButton\n                      icon=\"cash-multiple\"\n                      color={theme.colors.primary}\n                      size={20}\n                      onPress={() => console.log(\"Pressed\")}\n                    />\n                    <Caption style={styles.iconDescription}>Offer</Caption>\n                  </View>\n                </TouchableOpacity>\n\n                <View style={styles.iconContainer}>\n                  <IconButton\n                    icon=\"cash-100\"\n                    color={theme.colors.primary}\n                    size={20}\n                    onPress={() => console.log(\"Pressed\")}\n                  />\n                  <Text style={styles.iconDescription}>Purchase</Text>\n                </View>\n              </>\n            )}\n\n            <View style={styles.iconContainer}>\n              <MaterialCommunityIcons\n                name=\"share-outline\"\n                size={14}\n                color={iconColor}\n              />\n              <Caption style={styles.iconDescription}>\n                {product.is_available ? \"posted\" : \"sold\"}{\" \"}\n                <TimeAgo\n                  date={\n                    product.is_available\n                      ? product.created_at\n                      : product.updated_at\n                  }\n                />\n              </Caption>\n            </View>\n\n            <TouchableOpacity\n              onPress={() => {}}\n              hitSlop={{ top: 10, bottom: 10 }}\n            >\n              <View style={styles.iconContainer}>\n                <MaterialCommunityIcons\n                  name={inFavorites ? \"heart\" : \"heart-outline\"}\n                  size={12}\n                  color={inFavorites ? theme.colors.error : theme.colors.text}\n                />\n                <Caption style={styles.iconDescription}>\n                  {inFavorites ? \"Remove from Favorites\" : \"Add to Favorites\"}\n                </Caption>\n              </View>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Surface>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    paddingTop: 15,\n    paddingRight: 15,\n  },\n  leftColumn: {\n    width: 100,\n    alignItems: \"center\",\n  },\n  rightColumn: {\n    flex: 1,\n  },\n  topRow: {\n    flexDirection: \"row\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n  },\n  handle: {\n    marginRight: 3,\n  },\n  dot: {\n    fontSize: 3,\n  },\n  image: {\n    borderWidth: StyleSheet.hairlineWidth,\n    marginTop: 10,\n    borderRadius: 20,\n    width: \"100%\",\n    height: 150,\n  },\n  bottomRow: {\n    paddingVertical: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  iconDescription: {\n    marginLeft: 2,\n    lineHeight: 12,\n  },\n  button: {\n    marginTop: 20,\n  },\n  badge: {\n    position: \"absolute\",\n    bottom: 0,\n    right: 4,\n  },\n});\n","import React, { ComponentType } from \"react\";\nimport { FlatList, View, StyleSheet, VirtualizedList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { useTheme, ActivityIndicator } from \"react-native-paper\";\n\nimport { ProductStackNavigatorParamList } from \"../../types\";\n\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { useProductsData } from \"../../context/products.context\";\nimport { Product } from \"../../components/products/product\";\nimport { getRequest } from \"../../services/crud.service\";\n// type ProductProps = React.ComponentProps<typeof Product>;\ntype ProductProps = ProductStackNavigatorParamList[\"ProductDetails\"];\n\nfunction renderItem({ item }: { item: ProductProps }) {\n  return <Product {...item} />;\n}\n\nfunction keyExtractor(item: ProductProps) {\n  return item.id.toString();\n}\n\nfunction Separator() {\n  return <View style={{ height: StyleSheet.hairlineWidth }} />;\n}\n\ntype Props = {\n  navigation?: StackNavigationProp<ProductStackNavigatorParamList>;\n};\n\nexport const ProductScreen = (props: Props) => {\n  const theme = useTheme();\n\n  const { products, dispatch, loading, error } = useProductsData();\n\n  // const data = products?.map((productProps) => ({\n  //   ...productProps,\n  //   onPress: () =>\n  //     props.navigation &&\n  //     props.navigation.push(\"ProductDetails\", {\n  //       ...productProps,\n  //     }),\n  // }));\n\n  // const [myLoading, setMyLoading] = React.useState(false);\n  // const [myProd, setMyProd] = React.useState<ProductProps[] | undefined>(\n  //   undefined\n  // );\n  // const loadProducts = async () => {\n  //   setMyLoading(true);\n  //   const data = await getRequest({\n  //     url: `store/?expand=product_images,vendor,product,category&include=vendor.name`,\n  //   });\n  //   if (data) {\n  //     setMyProd(data);\n  //     setMyLoading(false);\n  //   }\n  // };\n\n  // React.useEffect(() => {\n  //   loadProducts();\n  // }, []);\n\n  return loading ? (\n    <ActivityIndicator />\n  ) : (\n    <FlatList\n      contentContainerStyle={{ backgroundColor: theme.colors.background }}\n      style={{ backgroundColor: theme.colors.background }}\n      data={\n        products &&\n        products.map((productProps) => ({\n          ...productProps,\n          onPress: () =>\n            props.navigation &&\n            props.navigation.push(\"ProductDetails\", {\n              ...productProps,\n            }),\n        }))\n      }\n      renderItem={({ item }: { item: ProductProps }) => {\n        return <Product {...item} />;\n      }}\n      keyExtractor={(item: ProductProps) => item.id.toString()}\n      ItemSeparatorComponent={Separator}\n    />\n  );\n};\n","import React, { ComponentType } from \"react\";\nimport {\n  FlatList,\n  View,\n  StyleSheet,\n  Text,\n  VirtualizedList,\n} from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { useTheme, ActivityIndicator } from \"react-native-paper\";\nimport {\n  ProductStackNavigatorParamList,\n  ProductTypeParamList,\n} from \"../../types\";\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { Product } from \"../../components/products/product\";\nimport { getVendorFavorites } from \"../../services/get.service\";\n\ntype ProductProps = ProductStackNavigatorParamList[\"ProductDetails\"];\n\nfunction Separator() {\n  return <View style={{ height: StyleSheet.hairlineWidth }} />;\n}\n\ntype Props = {\n  navigation?: StackNavigationProp<ProductStackNavigatorParamList>;\n};\n\nexport const FavoriteProductsScreen = (props: Props) => {\n  const theme = useTheme();\n  const {\n    vendor,\n    dispatch,\n    vendorFavoritesFeed,\n    vendorId,\n    error,\n    loading,\n    loadVendorFaves,\n  } = useVendorData();\n\n  const [loadingFaves, setLoadingFaves] = React.useState(false);\n  const [allVendorFaves, setAllVendorFaves] = React.useState<\n    ProductTypeParamList[] | undefined\n  >(undefined);\n  // const loadVendorFaves = async () => {\n  //   setLoadingFaves(true);\n  //   const data = await getVendorFavorites(vendorId);\n  //   if (data) {\n  //     setAllVendorFaves(data);\n  //     setLoadingFaves(false);\n  //   }\n  // };\n\n  // React.useMemo(() => {\n  //   if (vendor) {\n  //     setAllVendorFaves(vendor.favorites);\n  //   }\n  // }, []);\n\n  // React.useEffect(() => {\n  //   setLoadingFaves(true)\n  //   if (vendor) {\n  //     setAllVendorFaves(vendor.favorites);\n  //     setLoadingFaves(false)\n  //   }\n  // }, []);\n\n  // React.useEffect(() => {\n  //   if (vendorFavoritesFeed) {\n  //     // @ts-ignore\n  //     setAllVendorFaves(vendorFavoritesFeed);\n  //   }\n  // }, [vendorFavoritesFeed]);\n\n  return loading ? (\n    <ActivityIndicator />\n  ) : vendor && vendor.favorites.length < 1 ? (\n    <Text>You Haven't saved any product favorites</Text>\n  ) : (\n    <FlatList\n      contentContainerStyle={{ backgroundColor: theme.colors.background }}\n      style={{ backgroundColor: theme.colors.background }}\n      data={\n        allVendorFaves &&\n        allVendorFaves.map((productProps) => ({\n          ...productProps,\n          onPress: () =>\n            props.navigation &&\n            props.navigation.push(\"ProductDetails\", {\n              ...productProps,\n            }),\n        }))\n      }\n      renderItem={({ item }: { item: ProductProps }) => {\n        return <Product {...item} />;\n      }}\n      keyExtractor={(item: ProductProps) => item.id.toString()}\n      ItemSeparatorComponent={Separator}\n    />\n  );\n};\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport {\n  Surface,\n  Text,\n  Avatar,\n  Button,\n  Title,\n  Subheading,\n  Paragraph,\n  Caption,\n  useTheme,\n} from \"react-native-paper\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { capitalize } from \"../../utils/initialize\";\nimport { TimeAgo } from \"../common/time\";\n\nimport { useVendorData } from \"../../context/vendor.context\";\n\nimport {\n  OrderTransactionStackParamList,\n  OrderTypeParamList,\n} from \"../../types\";\n\ntype Props = {\n  onPress?: (id: number) => void;\n} & OrderTypeParamList;\n\nexport const OrderTransaction = (props: Props) => {\n  const order = props;\n  const theme = useTheme();\n\n  const { vendor, vendorId } = useVendorData();\n\n  // const contentColor = color(theme.colors.text).alpha(0.8).rgb().string();\n  const contentColor = theme.colors.text;\n\n  return (\n    <Surface style={styles.container}>\n      <View style={styles.leftColumn}>\n        <MaterialCommunityIcons\n          name=\"currency-usd-off\"\n          size={30}\n          color=\"#8d38e8\"\n        />\n      </View>\n      <View style={styles.rightColumn}>\n        <View style={styles.topRow}>\n          {order.product.image && (\n            <Avatar.Image\n              source={{ uri: order.product.image.thumbnail }}\n              size={60}\n            />\n          )}\n        </View>\n        <Title>Status</Title>\n        <Subheading style={{ marginBottom: 10 }}>{order.status}</Subheading>\n        <Title>Product</Title>\n        <Paragraph>\n          {order.product.title ? order.product.title : order.product.toString()}\n        </Paragraph>\n        <Title>Seller</Title>\n        <Paragraph>\n          {order.vendor.name\n            ? capitalize(order.vendor.name)\n            : vendor && order.vendor.toString() === vendorId\n            ? vendor.name\n            : order.vendor.toString()}\n        </Paragraph>\n        <Button\n          mode=\"text\"\n          uppercase\n          color={theme.colors.primary}\n          onPress={() => console.log(\"Pressed\")}\n        >\n          View\n        </Button>\n\n        <Caption style={{ color: contentColor }}>\n          {order.updated_at ||\n            (order.created_at && (\n              <TimeAgo date={order.updated_at || order.created_at} />\n            ))}\n        </Caption>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    paddingTop: 15,\n    paddingRight: 15,\n    paddingBottom: 15,\n  },\n  leftColumn: {\n    width: 100,\n    marginRight: 10,\n    alignItems: \"center\",\n  },\n  rightColumn: {\n    flex: 1,\n  },\n  topRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 10,\n  },\n});\n","import React from \"react\";\nimport { View, FlatList, StyleSheet } from \"react-native\";\nimport { useTheme, ActivityIndicator } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport { OrderTransaction } from \"../../components/orders/orderTransaction\";\nimport { useVendorData } from \"../../context/vendor.context\";\n\nimport {\n  OrderTransactionStackParamList,\n  OrderTypeParamList,\n} from \"../../types\";\n\n// type OrderTransactionProps = OrderTypeParamList;\n\nfunction Separator() {\n  return <View style={{ height: StyleSheet.hairlineWidth }} />;\n}\n\ntype Props = {\n  navigation?: StackNavigationProp<OrderTransactionStackParamList>;\n};\n\ntype OrderProps = React.ComponentProps<typeof OrderTransaction>;\n\nfunction renderItem({ item }: { item: OrderProps }) {\n  return <OrderTransaction {...item} />;\n}\n\nfunction keyExtractor(item: OrderProps) {\n  return item.id.toString();\n}\n\n// type Props = {\n//   navigation?: StackNavigationProp<OrderTypeParamList>;\n// };\n\nexport const OrderTransactionScreen = (props: Props) => {\n  const theme = useTheme();\n  const { vendor, dispatch, loading, error } = useVendorData();\n\n  return loading || !vendor ? (\n    <ActivityIndicator />\n  ) : (\n    <FlatList\n      contentContainerStyle={{ backgroundColor: theme.colors.background }}\n      style={{ backgroundColor: theme.colors.background }}\n      //   data={vendor.order_requests.map((orderProps) => ({\n      //   ...orderProps,\n      // }))}\n      // data={vendor.order_requests.map((order) => order)}\n      data={\n        vendor &&\n        vendor.order_requests &&\n        vendor.order_requests.map((orderReqs) => ({\n          ...orderReqs,\n          onPress: () =>\n            props.navigation &&\n            props.navigation.push(\"OrderDetails\", {\n              ...orderReqs,\n            }),\n        }))\n      }\n      renderItem={({ item }: { item: OrderProps }) => {\n        return <OrderTransaction {...item} />;\n      }}\n      keyExtractor={(item: OrderProps) => item.id.toString()}\n      ItemSeparatorComponent={() => (\n        <View style={{ height: StyleSheet.hairlineWidth }} />\n      )}\n    />\n  );\n};\n","import React from \"react\";\n\nimport { Dimensions } from \"react-native\";\nimport { useTheme } from \"react-native-paper\";\nimport { TabView, SceneMap, TabBar, TabBarProps } from \"react-native-tab-view\";\n\nimport { OrderTransactionScreen } from \"./orderTransactionScreen\";\n\nconst initialLayout = { width: Dimensions.get(\"window\").width };\n\nconst OrderRequests = () => <OrderTransactionScreen />;\n\nconst OrdersMade = () => <OrderTransactionScreen />;\n\nexport const TransactionOrdersScreen = () => {\n  const [index, setIndex] = React.useState(0);\n\n  const [routes] = React.useState([\n    { key: \"orderRequests\", title: \"Sales\" },\n    { key: \"ordersMade\", title: \"Purchases\" },\n  ]);\n\n  const theme = useTheme();\n\n  const renderScene = SceneMap({\n    orderRequests: OrderRequests,\n    ordersMade: OrdersMade,\n  });\n\n  // const tabBarColor = theme.dark\n  //   ? (overlay(4, theme.colors.surface) as string)\n  //   : theme.colors.surface;\n\n  const tabBarColor = theme.colors.surface;\n\n  // const rippleColor = theme.dark\n  //   ? color(tabBarColor).lighten(0.5)\n  //   : color(tabBarColor).darken(0.2);\n\n  // interface Props extends TabBarProps {}\n  const renderTabBar = (props: any) => (\n    <TabBar\n      {...props}\n      indicatorStyle={{ backgroundColor: theme.colors.primary }}\n      style={{ backgroundColor: tabBarColor, shadowColor: theme.colors.text }}\n      labelStyle={{ color: theme.colors.primary }}\n      // pressColor={rippleColor}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      <TabView\n        navigationState={{ index, routes }}\n        renderScene={renderScene}\n        onIndexChange={setIndex}\n        initialLayout={initialLayout}\n        renderTabBar={renderTabBar}\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport { MaterialBottomTabNavigationProp } from \"@react-navigation/material-bottom-tabs\";\nimport {\n  Headline,\n  Caption,\n  useTheme,\n  Button,\n  TextInput,\n} from \"react-native-paper\";\n\n// import overlay from './overlay';\n\ntype Props = {\n  navigation: MaterialBottomTabNavigationProp<{}>;\n};\n\nexport const MakeOfferScreen = () => {\n  const theme = useTheme();\n\n  // const backgroundColor = overlay(2, theme.colors.surface) as string;\n  const backgroundColor = theme.colors.surface;\n\n  return (\n    <ScrollView\n      style={{ backgroundColor }}\n      contentContainerStyle={[styles.scrollViewContent, { backgroundColor }]}\n    >\n      <Headline style={styles.centerText}>\n        Send a message, get a message\n      </Headline>\n      <Caption style={styles.centerText}>\n        Private Messages are private conversations between you and other people\n        on Twitter. Share Tweets, media, and more!\n      </Caption>\n      <Button\n        onPress={() => {}}\n        style={styles.button}\n        mode=\"contained\"\n        labelStyle={{ color: \"white\" }}\n      >\n        Write a message\n      </Button>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  scrollViewContent: {\n    flex: 1,\n    paddingHorizontal: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  centerText: {\n    textAlign: \"center\",\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n","import React, { ComponentProps } from \"react\";\nimport * as ImagePicker from \"expo-image-picker\";\n// import { ImagePickerTypes } from 'expo-image-picker'\nimport {\n  Image,\n  View,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  TextInputChangeEventData,\n  NativeSyntheticEvent,\n} from \"react-native\";\n\nimport { FormBuilder } from \"react-native-paper-form-builder\";\nimport { InputSelect } from \"react-native-paper-form-builder\";\n\nimport {\n  ControllerRenderProps,\n  FieldValues,\n  RegisterOptions,\n  UseFormStateReturn,\n  useController,\n  useForm,\n  SubmitHandler,\n} from \"react-hook-form\";\n\nimport { MaterialBottomTabNavigationProp } from \"@react-navigation/material-bottom-tabs\";\nimport {\n  Headline,\n  Caption,\n  useTheme,\n  Button,\n  TextInput,\n  Text,\n  Menu,\n  TouchableRipple,\n  Divider,\n  HelperText,\n} from \"react-native-paper\";\nimport { API, PRODUCT_ENDPONT } from \"../../constants/backend.constants\";\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { useAuth } from \"../../context/auth.context\";\nimport { AuthContext } from \"../../context/authUtils\";\nimport { getCategories } from \"../../services/get.service\";\n\nimport { UploadImageField } from \"./uploadImageField\";\n\ntype Props = {\n  navigation: MaterialBottomTabNavigationProp<{}>;\n};\n\nexport declare type OPTIONS = Array<{\n  label: string;\n  value: string | number;\n}>;\n\nexport declare type InputSelectProps = {\n  field: ControllerRenderProps<FieldValues, string>;\n  formState: UseFormStateReturn<FieldValues>;\n  textInputProps?: ComponentProps<typeof TextInput>;\n  options: OPTIONS;\n  CustomTextInput?: any;\n  onDismiss?: () => void;\n};\n\nexport type ImageInfo = {\n  uri: string;\n  width: number;\n  height: number;\n  type?: \"image\" | \"video\";\n  exif?: {\n    [key: string]: any;\n  };\n  base64?: string;\n};\n\nconst TextFormKeys = [\"title\", \"category\", \"description\", \"price\", \"condition\"];\n\nexport type FileFormData = {\n  images: ImageInfo[] | [];\n};\n\ntype ProductFormValues = {\n  title: string;\n  category: string;\n  description: string;\n  price: string;\n  condition: string;\n  images: ImageInfo[] | [];\n};\n\nexport const AddProductScreen = () => {\n  const theme = useTheme();\n  const backgroundColor = theme.colors.surface;\n\n  const { state } = React.useContext(AuthContext);\n\n  const { vendorId } = useVendorData();\n\n  const [categories, setCategories] = React.useState<Category[]>([]);\n  const [categoryOptions, setCategoryOptions] = React.useState<OPTIONS>([\n    { label: \"Category\", value: 0 },\n  ]);\n  const [images, setImages] = React.useState<ImageInfo[] | []>([]);\n\n  const {\n    control,\n    setFocus,\n    setError,\n    setValue,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<ProductFormValues>({\n    defaultValues: {\n      title: \"\",\n      category: \"\",\n      description: \"\",\n      price: \"\",\n      condition: \"\",\n      images: [],\n    },\n    mode: \"onChange\",\n  });\n\n  const onChangeText = (\n    event: NativeSyntheticEvent<TextInputChangeEventData>\n  ) => {\n    return {\n      value: event.nativeEvent.text,\n    };\n  };\n\n  const loadCategories = async () => {\n    const data = await getCategories();\n    if (data) {\n      setCategories(data);\n    }\n  };\n\n  React.useEffect(() => {\n    categories &&\n      setCategoryOptions(\n        categories.map((category) => ({\n          label: category.name,\n          value: category.id,\n        }))\n      );\n  }, [categories]);\n\n  React.useEffect(() => {\n    loadCategories();\n  }, []);\n\n  React.useEffect(() => {\n    (async () => {\n      if (Platform.OS !== \"web\") {\n        const { status } =\n          await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== \"granted\") {\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let results = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      allowsMultipleSelection: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(results);\n\n    if (!results.cancelled) {\n      setImages(results.selected.map((result) => result));\n    }\n  };\n\n  const onSubmit: SubmitHandler<ProductFormValues> = (validatedData) => {\n    const imagesForm = new FormData();\n    for (const img of images) {\n      imagesForm.append(\"image\", img.uri, img + \"-\");\n    }\n    const imageData =\n      images &&\n      images.length > 0 &&\n      images.map((image) => ({\n        type: image.type ? image.type : \"image\",\n        uri:\n          Platform.OS === \"android\"\n            ? image.uri\n            : image.uri.replace(\"file://\", \"\"),\n        name: image.uri,\n      }));\n    const data = new FormData();\n    data.append(\"title\", validatedData.title);\n    data.append(\"description\", validatedData.description);\n    data.append(\"price\", validatedData.price);\n    data.append(\"condition\", validatedData.condition);\n    data.append(\"category\", validatedData.category);\n    // @ts-ignore\n    data.append(\"images\", imagesForm, {\n      type: \"file\",\n    });\n\n    const request = new Request(`${API}/${PRODUCT_ENDPONT}/`, {\n      method: \"POST\",\n      headers: {\n        // \"Content-Type\": \"multipart/form-data\",\n        Authorization: state.userToken ? `Bearer ${state.userToken}` : \"\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(data),\n    });\n\n    const res = fetch(request).then((res) => res.json());\n    alert(JSON.stringify(res));\n  };\n\n  // const formData = new FormData();\n\n  // formData.append(\"title\", getValue(\"title\"));\n\n  // formData.append(\"detectImg\", {\n  //   uri: image.uri,\n  //   name: \"image\",\n  //   type: \"image/jpg\",\n  // });\n\n  // const response = await fetch(\"BACKEND_URL\", {\n  //   method: \"POST\",\n  //   headers: {\n  //     \"Content-Type\": \"multipart/form-data\",\n  //   },\n  //   body: formData,\n  // });\n\n  return (\n    <ScrollView\n      style={{ backgroundColor }}\n      contentContainerStyle={[styles.scrollViewContent, { backgroundColor }]}\n    >\n      <Headline style={styles.centerText}>Sell a Product</Headline>\n      <Caption style={styles.centerText}>Pick a Product</Caption>\n      <Button\n        onPress={() => {}}\n        style={styles.button}\n        mode=\"contained\"\n        labelStyle={{ color: \"white\" }}\n      >\n        Write a message\n      </Button>\n      <React.Fragment>\n        <React.Fragment>\n          <FormBuilder\n            control={control}\n            setFocus={setFocus}\n            formConfigArray={[\n              {\n                name: \"title\",\n                type: \"text\",\n                textInputProps: {\n                  label: \"Title\",\n                  left: <TextInput.Icon name={\"account\"} />,\n                  // value: title,\n                  onChange: () => {\n                    setError(\"title\", {\n                      type: \"manual\",\n                      message: \"Don't forget...\",\n                    });\n                  },\n                },\n                rules: {\n                  required: {\n                    value: true,\n                    message: \"Title is required\",\n                  },\n                  maxLength: {\n                    value: 255,\n                    message: \"Title should be less than 255 characters.\",\n                  },\n                },\n              },\n              {\n                name: \"description\",\n                type: \"text\",\n                textInputProps: {\n                  label: \"Description\",\n                  left: <TextInput.Icon name={\"email\"} />,\n                  onChange: async (e) => {\n                    const value = e.nativeEvent.text;\n                    if (value === \"\") {\n                      setValue(\"description\", value);\n                    }\n                    setValue(\"description\", value);\n                  },\n                },\n                rules: {\n                  required: {\n                    value: false,\n                    message: \"Description is optional\",\n                  },\n                },\n              },\n              {\n                name: \"price\",\n                type: \"text\",\n                textInputProps: {\n                  label: \"Price\",\n                  left: <TextInput.Icon name={\"lock\"} />,\n                  onChange: (event) => {\n                    onChangeText(event);\n                  },\n                },\n                rules: {\n                  required: {\n                    value: true,\n                    message: \"Price is required\",\n                  },\n                  pattern: {\n                    value: /^(\\d*([.,](?=\\d{3}))?\\d+)+((?!\\2)[.,]\\d\\d)?$/gm,\n                    message: \"Price is invalid\",\n                  },\n                  minLength: {\n                    value: 3,\n                    message: \"The price must be a valid decimal field.\",\n                  },\n                  maxLength: {\n                    value: 8,\n                    message: \"The price must be between 0 and 999,999.99\",\n                  },\n                },\n              },\n              {\n                name: \"condition\",\n                type: \"autocomplete\",\n                textInputProps: {\n                  label: \"Condition\",\n                  left: <TextInput.Icon name={\"office-building\"} />,\n                  // onChange\n                },\n                rules: {\n                  required: {\n                    value: true,\n                    message: \"Condition is required\",\n                  },\n                },\n                options: [\n                  {\n                    label: \"Mint\",\n                    value: 5,\n                  },\n                  {\n                    label: \"New\",\n                    value: 4,\n                  },\n                  {\n                    label: \"Good\",\n                    value: 3,\n                  },\n                  {\n                    label: \"Fair\",\n                    value: 2,\n                  },\n                  {\n                    label: \"Damaged\",\n                    value: 1,\n                  },\n                ],\n              },\n              {\n                name: \"category\",\n                type: \"select\",\n                textInputProps: {\n                  label: \"Category\",\n                  left: <TextInput.Icon name={\"account\"} />,\n                },\n                rules: {\n                  required: {\n                    value: true,\n                    message: \"Category is required\",\n                  },\n                },\n                options: categoryOptions,\n              },\n            ]}\n          />\n          <Button mode={\"contained\"} onPress={pickImage}>\n            Upload Images{\" \"}\n          </Button>\n          <View\n            style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}\n          >\n            {images &&\n              images.map((image) => (\n                <Image\n                  source={{ uri: image.uri }}\n                  style={{ width: 200, height: 200 }}\n                />\n              ))}\n          </View>\n          <Button mode={\"contained\"} onPress={handleSubmit(onSubmit)}>\n            Submit\n          </Button>\n        </React.Fragment>\n        {errors.title && <Text>{errors.title.message}</Text>}\n      </React.Fragment>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  scrollViewContent: {\n    flex: 1,\n    paddingHorizontal: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  centerText: {\n    textAlign: \"center\",\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n\n// function ImageUpload() {\n//   const { register, handleSubmit } = useForm();\n\n//   const onSubmit = async (data) => {\n//     const formData = new FormData();\n//     formData.append(\"picture\", data.picture[0]);\n\n//     const res = await fetch(\"http://localhost:4000/picture\", {\n//       method: \"POST\",\n//       body: formData,\n//     }).then((res) => res.json());\n//     alert(JSON.stringify(res));\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit(onSubmit)}>\n//       <input ref={register} type=\"file\" name=\"picture\" />\n//       <button>Submit</button>\n//     </form>\n//   );\n// }\n\n// const CategoriesSelect = (props: InputSelectProps) => {\n//   const {\n//     formState,\n//     field,\n//     textInputProps,\n//     options,\n//     CustomTextInput,\n//     onDismiss = () => {},\n//   } = props;\n//   const theme = useTheme();\n//   const errorMessage = formState.errors?.[field.name]?.message;\n//   const textColor = errorMessage ? theme.colors.error : theme.colors.text;\n//   const [visible, setVisible] = useState(false);\n//   const [width, setWidth] = useState(0);\n//   const [height, setHeight] = useState(0);\n//   const INPUT = CustomTextInput ?? TextInput;\n\n//   const styles = useMemo(\n//     () =>\n//       StyleSheet.create({\n//         textInputStyle: {\n//           color: textColor,\n//         },\n//         menuStyle: {\n//           minWidth: width,\n//           width: width,\n//           marginTop: height,\n//         },\n//       }),\n//     [height, textColor, theme.colors.onSurface, theme.colors.surface, width]\n//   );\n\n//   const onLayout = useCallback((event: LayoutChangeEvent) => {\n//     const { width: _width, height: _height } = event.nativeEvent.layout;\n//     setWidth(_width);\n//     setHeight(_height);\n//   }, []);\n//   return (\n//     <React.Fragment>\n//       <Menu\n//         visible={visible}\n//         onDismiss={() => setVisible(false)}\n//         style={styles.menuStyle}\n//         anchor={\n//           <TouchableRipple\n//             onPress={() => {\n//               Keyboard.dismiss();\n//               setVisible(true);\n//             }}\n//           >\n//             <View pointerEvents={\"none\"} onLayout={onLayout}>\n//               <INPUT\n//                 ref={field.ref}\n//                 mode={\"outlined\"}\n//                 error={errorMessage ? true : false}\n//                 {...textInputProps}\n//                 value={\n//                   options.find(({ value }) => `${value}` === `${field.value}`)\n//                     ?.label\n//                 }\n//                 onFocus={() => {\n//                   Keyboard.dismiss();\n//                   setVisible(true);\n//                 }}\n//                 style={[styles.textInputStyle, textInputProps?.style]}\n//               />\n//             </View>\n//           </TouchableRipple>\n//         }\n//       >\n//         {options.map(({ label: _label, value: _value }, _index) => {\n//           return (\n//             <Fragment key={_value}>\n//               <Menu.Item\n//                 title={_label}\n//                 style={{ width, minWidth: width, maxWidth: width }}\n//                 onPress={() => {\n//                   field.onChange(`${_value}`);\n//                   setVisible(false);\n//                   !!onDismiss && onDismiss();\n//                 }}\n//                 titleStyle={{\n//                   color:\n//                     `${_value}` === `${field.value}`\n//                       ? theme.colors.primary\n//                       : theme.colors.text,\n//                 }}\n//               />\n//               {_index < options.length - 1 && <Divider />}\n//             </Fragment>\n//           );\n//         })}\n//       </Menu>\n//       {errorMessage && <HelperText type={\"error\"}>{errorMessage}</HelperText>}\n//     </React.Fragment>\n//   );\n// };\n","import React from \"react\";\nimport { ScrollView, StyleSheet } from \"react-native\";\nimport { MaterialBottomTabNavigationProp } from \"@react-navigation/material-bottom-tabs\";\nimport { Headline, Caption, useTheme, Button } from \"react-native-paper\";\n\n// import overlay from './overlay';\n\ntype Props = {\n  navigation: MaterialBottomTabNavigationProp<{}>;\n};\n\nexport const Message = () => {\n  const theme = useTheme();\n\n  // const backgroundColor = overlay(2, theme.colors.surface) as string;\n  const backgroundColor = theme.colors.surface;\n\n  return (\n    <ScrollView\n      style={{ backgroundColor }}\n      contentContainerStyle={[styles.scrollViewContent, { backgroundColor }]}\n    >\n      <Headline style={styles.centerText}>\n        Send a message, get a message\n      </Headline>\n      <Caption style={styles.centerText}>\n        Private Messages are private conversations between you and other people\n        on Twitter. Share Tweets, media, and more!\n      </Caption>\n      <Button\n        onPress={() => {}}\n        style={styles.button}\n        mode=\"contained\"\n        labelStyle={{ color: \"white\" }}\n      >\n        Write a message\n      </Button>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  scrollViewContent: {\n    flex: 1,\n    paddingHorizontal: 30,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  centerText: {\n    textAlign: \"center\",\n  },\n  button: {\n    marginTop: 20,\n  },\n});\n","// import color from \"color\";\nimport { Animated } from \"react-native\";\nimport { DarkTheme } from \"react-native-paper\";\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return surfaceColor;\n  // return color(surfaceColor)\n  //   .mix(color(\"white\"), overlayTransparency * 0.01)\n  //   .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n","import React, { RefObject } from \"react\";\n\nimport { createMaterialBottomTabNavigator } from \"@react-navigation/material-bottom-tabs\";\nimport { useTheme, Portal, FAB } from \"react-native-paper\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport {\n  useIsFocused,\n  RouteProp,\n  getFocusedRouteNameFromRoute,\n} from \"@react-navigation/native\";\n\nimport { ProductScreen } from \"../screens/products/productScreen\";\nimport { FavoriteProductsScreen } from \"../screens/vendor/favoritesScreen\";\nimport { TransactionOrdersScreen } from \"../screens/orders/transactionOrdersScreen\";\nimport { MakeOfferScreen } from \"../screens/vendor/makeOfferScreen\";\nimport { AddProductScreen } from \"../screens/vendor/addProductScreen\";\nimport { Message } from \"../components/account/messages\";\nimport {\n  OrderTransactionStackParamList,\n  ProductStackNavigatorParamList,\n} from \"../types\";\n\nimport overlay from \"../utils/overlay\";\n\nimport { AccountStackNavigator } from \"./accountStackNavigator\";\nimport { AuthContext } from \"../context/authUtils\";\n\nconst Tab = createMaterialBottomTabNavigator();\n\ntype OrderProps = {\n  route: RouteProp<OrderTransactionStackParamList, \"Order\">;\n};\ntype Props = {\n  route: RouteProp<ProductStackNavigatorParamList, \"Products\">;\n};\n\nexport const BottomTabs = (props: Props) => {\n  const routeName = getFocusedRouteNameFromRoute(props.route) ?? \"Store\";\n  const { state } = React.useContext(AuthContext);\n  const theme = useTheme();\n  const safeArea = useSafeAreaInsets();\n  const isFocused = useIsFocused();\n\n  let icon = \"feather\";\n\n  switch (routeName) {\n    case \"Transactions\":\n      icon = \"cash-multiple\";\n      break;\n    default:\n      icon = \"feather\";\n      break;\n  }\n\n  const tabBarColor = theme.dark\n    ? (overlay(6, theme.colors.surface) as string)\n    : theme.colors.surface;\n\n  // const [view, setView] = React.useState()\n\n  const [renderStore, setRendorStore] = React.useState(false);\n  React.useEffect(() => {\n    if (state.isSignedIn) {\n      setRendorStore(true);\n    } else {\n      setRendorStore(false);\n    }\n  }, [state]);\n\n  return (\n    <React.Fragment>\n      <React.Fragment>\n        <Tab.Navigator\n          initialRouteName=\"Store\"\n          backBehavior=\"initialRoute\"\n          shifting={true}\n          activeColor={theme.colors.primary}\n          // inactiveColor={color(theme.colors.text).alpha(0.6).rgb().string()}\n          // sceneAnimationEnabled={false}\n        >\n          <Tab.Screen\n            name=\"Products\"\n            component={ProductScreen}\n            options={{\n              tabBarIcon: \"package-variant\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"Transactions\"\n            component={TransactionOrdersScreen}\n            options={{\n              tabBarIcon: \"cash-multiple\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"Favorites\"\n            component={FavoriteProductsScreen}\n            options={{\n              tabBarIcon: \"heart\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"My Products\"\n            component={ProductScreen}\n            options={{\n              tabBarIcon: \"folder-home-outline\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"Add Product\"\n            component={AddProductScreen}\n            options={{\n              tabBarIcon: \"folder-home-outline\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"Make Offer\"\n            component={MakeOfferScreen}\n            options={{\n              tabBarIcon: \"folder-home-outline\",\n              tabBarColor,\n            }}\n          />\n          <Tab.Screen\n            name=\"Messages\"\n            component={Message}\n            options={{\n              tabBarIcon: \"message-text-outline\",\n              tabBarColor,\n            }}\n          />\n          {/* <Tab.Screen\n          name=\"StartScreen\"\n          component={AccountStackNavigator}\n          options={{\n            tabBarIcon: \"message-text-outline\",\n            tabBarColor,\n          }}\n        /> */}\n        </Tab.Navigator>\n        <Portal>\n          <FAB\n            visible={isFocused}\n            icon={icon}\n            style={{\n              position: \"absolute\",\n              bottom: safeArea.bottom + 65,\n              right: 16,\n            }}\n            color=\"white\"\n            theme={{\n              colors: {\n                accent: theme.colors.primary,\n              },\n            }}\n            onPress={() => {}}\n          />\n        </Portal>\n      </React.Fragment>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { StyleSheet, View, Image, TouchableOpacity } from \"react-native\";\nimport {\n  Surface,\n  Title,\n  Caption,\n  Avatar,\n  Subheading,\n  useTheme,\n  Badge,\n  Button,\n  Text,\n} from \"react-native-paper\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport { ProductStackNavigatorParamList } from \"../../types\";\nimport { TimeAgo } from \"../common/time\";\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { useVendorIcon } from \"../../hooks/useVendorIcon\";\nimport { useImagePlaceholder } from \"../../hooks/useImagePlaceholder\";\nimport { useAvatarPlaceholder } from \"../../hooks/useAvatarPlaceholder\";\nimport { initialize } from \"../../utils/initialize\";\n\nimport {\n  DEFAULT_PLACEHOLDER,\n  DEFAULT_AVATAR,\n} from \"../../constants/backend.constants\";\n\ntype Props = {} & ProductStackNavigatorParamList[\"ProductDetails\"];\n\nexport const randomColor = () => {\n  const hex = Math.floor(Math.random() * 0xffffff);\n  return `${hex.toString(16)}`;\n};\n\nexport const ProductDetail = (props: Props) => {\n  const product = props;\n  const theme = useTheme();\n\n  const { vendorId, vendorFaves } = useVendorData();\n\n  const { vendorIcon, vendorInitials } = useVendorIcon();\n\n  const { productImage, productThumbnail } = useImagePlaceholder(product.image);\n\n  const { avatarImage } = useAvatarPlaceholder(product.vendor.image);\n\n  const otherVendorInitials = initialize(product.vendor.name);\n\n  const inFavorites = vendorFaves.some(\n    (favorite: string) => favorite === product.slug\n  );\n\n  // const contentColor = color(theme.colors.text).alpha(0.8).rgb().string();\n\n  const contentColor = theme.colors.text;\n\n  // const imageBorderColor = color(theme.colors.text).alpha(0.15).rgb().string();\n\n  const imageBorderColor = theme.colors.text;\n\n  const iconColor = theme.colors.text;\n\n  const ran = randomColor();\n  const dom = randomColor();\n  const vendorImage = `https://via.placeholder.com/150/${ran}/${dom}`;\n\n  // image.image.thumbnail\n  const tempImage = `https://via.placeholder.com/150/${ran}/${dom}`;\n\n  // similar.image.thumbnail\n\n  // const vendorIcon = tempImage;\n\n  return (\n    <Surface style={styles.container}>\n      <View style={styles.topRow}>\n        <Avatar.Image\n          style={styles.avatar}\n          source={{ uri: vendorImage }}\n          size={60}\n        />\n        <View>\n          <Title>{product.title}</Title>\n          <Caption style={styles.handle}>{product.vendor.name}</Caption>\n        </View>\n      </View>\n      <Subheading style={[styles.content, { color: contentColor }]}>\n        {product.description}\n      </Subheading>\n      <Image\n        source={{\n          uri: productImage,\n          // product.image.image.full_size\n        }}\n        style={[\n          styles.image,\n          {\n            borderColor: imageBorderColor,\n          },\n        ]}\n      />\n      <Text style={{ marginBottom: 10 }}>{product.condition}</Text>\n      <Text style={{ marginBottom: 10 }}>{product.price}</Text>\n      <Text style={{ marginBottom: 10 }}>{product.price}</Text>\n      <Text style={{ marginBottom: 10 }}>\n        {product.is_available ? \"Posted\" : \"Sold\"}{\" \"}\n        <TimeAgo\n          date={product.is_available ? product.created_at : product.updated_at}\n        />\n      </Text>\n\n      <View style={styles.bottomRow}>\n        {product.is_available && (\n          <>\n            <TouchableOpacity\n              onPress={() => {}}\n              hitSlop={{ top: 10, bottom: 10 }}\n            >\n              <View style={styles.iconContainer}>\n                <Button\n                  mode=\"text\"\n                  uppercase\n                  color={theme.colors.primary}\n                  onPress={() => console.log(\"Pressed\")}\n                >\n                  Purchase\n                </Button>\n              </View>\n            </TouchableOpacity>\n\n            <View style={styles.iconContainer}>\n              <Button\n                mode=\"text\"\n                uppercase\n                color={theme.colors.primary}\n                onPress={() => console.log(\"Pressed\")}\n              >\n                Purchase\n              </Button>\n            </View>\n          </>\n        )}\n      </View>\n\n      {product.product_images && product.product_images.length > 0 && (\n        <>\n          <View style={{ height: StyleSheet.hairlineWidth }} />;\n          <View style={styles.bottomRow}>\n            <View>\n              <Title>Product Images</Title>\n              <Caption style={styles.handle}>{product.vendor.name}</Caption>\n            </View>\n\n            {product.product_images.map((image) => (\n              <TouchableOpacity\n                onPress={() => {}}\n                hitSlop={{ top: 10, bottom: 10 }}\n              >\n                <Avatar.Image\n                  style={{ marginRight: 10 }}\n                  source={{\n                    uri: image.image.thumbnail\n                      ? image.image.thumbnail\n                      : image.image.full_size\n                      ? image.image.full_size\n                      : DEFAULT_PLACEHOLDER,\n                  }}\n                  size={40}\n                />\n              </TouchableOpacity>\n            ))}\n          </View>\n        </>\n      )}\n      {product.similar_products && product.similar_products.length > 0 && (\n        <>\n          <View style={{ height: StyleSheet.hairlineWidth }} />;\n          <Title>Related Products</Title>\n          <Caption style={styles.handle}>{product.category}</Caption>\n          {product.similar_products.map((similar) => (\n            <View style={styles.bottomRow}>\n              <Title>{similar.title}</Title>\n              {similar.id.toString() === vendorId ? (\n                <Caption style={styles.handle}>Your Product</Caption>\n              ) : (\n                <Caption style={styles.handle}>{similar.vendor}</Caption>\n              )}\n\n              <TouchableOpacity\n                onPress={() => {}}\n                hitSlop={{ top: 10, bottom: 10 }}\n              >\n                <Avatar.Image\n                  style={{ marginRight: 10 }}\n                  source={{\n                    uri: similar.image.thumbnail\n                      ? similar.image.thumbnail\n                      : similar.image.full_size\n                      ? similar.image.full_size\n                      : DEFAULT_PLACEHOLDER,\n                  }}\n                  size={40}\n                />\n              </TouchableOpacity>\n            </View>\n          ))}\n        </>\n      )}\n      <View style={styles.footerRow}>\n        <TouchableOpacity style={{ marginLeft: 10 }} onPress={() => {}}>\n          <View>\n            {product.id.toString() === vendorId ? (\n              vendorIcon ? (\n                <Avatar.Image\n                  size={40}\n                  style={{ marginRight: 10 }}\n                  source={{\n                    uri: vendorIcon,\n                  }}\n                />\n              ) : vendorInitials ? (\n                <Avatar.Text\n                  size={40}\n                  style={{ marginRight: 10 }}\n                  label={vendorInitials}\n                />\n              ) : (\n                <Avatar.Image\n                  size={40}\n                  style={{ marginRight: 10 }}\n                  source={{ uri: DEFAULT_AVATAR }}\n                />\n              )\n            ) : avatarImage ? (\n              <Avatar.Image\n                size={40}\n                style={{ marginRight: 10 }}\n                source={{\n                  uri: vendorIcon,\n                }}\n              />\n            ) : (\n              <Avatar.Text\n                size={40}\n                style={{ marginRight: 10 }}\n                label={otherVendorInitials}\n              />\n            )}\n\n            <Badge\n              style={{\n                position: \"absolute\",\n                bottom: 0,\n                right: 4,\n                backgroundColor: product.vendor.online\n                  ? theme.colors.accent\n                  : theme.colors.disabled,\n              }}\n            />\n          </View>\n        </TouchableOpacity>\n        <Title>{product.vendor.name}</Title>\n        {product.vendor.product_count > 0 && (\n          <View style={styles.iconContainer}>\n            <MaterialCommunityIcons\n              name=\"package-variant-closed\"\n              size={14}\n              color={iconColor}\n            />\n            <Caption style={styles.iconDescription}>\n              {product.vendor.product_count}\n              {\"\"} products\n            </Caption>\n          </View>\n        )}\n        {product.vendor.order_count > 0 && (\n          <View style={styles.iconContainer}>\n            <MaterialCommunityIcons\n              name=\"currency-usd-off\"\n              size={14}\n              color={iconColor}\n            />\n            <Caption style={styles.iconDescription}>\n              {product.vendor.order_count}\n              {\"\"} transactions\n            </Caption>\n          </View>\n        )}\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n  avatar: {\n    marginRight: 20,\n  },\n  topRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  handle: {\n    marginRight: 3,\n    lineHeight: 12,\n  },\n  content: {\n    marginTop: 25,\n    fontSize: 20,\n    lineHeight: 30,\n  },\n  image: {\n    borderWidth: StyleSheet.hairlineWidth,\n    marginTop: 25,\n    borderRadius: 20,\n    width: \"100%\",\n    height: 280,\n  },\n  thumbnail: {\n    borderWidth: StyleSheet.hairlineWidth,\n    marginTop: 25,\n    borderRadius: 10,\n    width: \"25%\",\n    height: 140,\n  },\n  bottomRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 10,\n  },\n  footerRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 10,\n  },\n  iconContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  iconDescription: {\n    marginLeft: 2,\n    lineHeight: 12,\n  },\n});\n","import React from \"react\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { ProductStackNavigatorParamList } from \"../../types\";\nimport { ProductDetail } from \"../../components/products/productDetail\";\n\ntype Props = {\n  route: RouteProp<ProductStackNavigatorParamList, \"ProductDetails\">;\n};\n\nexport const ProductDetailScreen = (props: Props) => {\n  return <ProductDetail {...props.route.params} />;\n};\n","import React from \"react\";\nimport { TouchableOpacity } from \"react-native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport { DrawerNavigationProp } from \"@react-navigation/drawer\";\nimport { Appbar, Avatar, useTheme } from \"react-native-paper\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport { BottomTabs } from \"./bottomTabNavigator\";\nimport { ProductDetailScreen } from \"../screens/products/productDetailScreen\";\n\nimport { ProductStackNavigatorParamList } from \"../types\";\n\nimport { useAuth } from \"../context/auth.context\";\nimport { useVendorData } from \"../context/vendor.context\";\nimport { useVendorIcon } from \"../hooks/useVendorIcon\";\n\nconst Stack = createStackNavigator<ProductStackNavigatorParamList>();\n\nexport const StackNavigator = () => {\n  const theme = useTheme();\n\n  const { vendorInitials, vendorIcon } = useVendorIcon();\n\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Products\"\n      headerMode=\"screen\"\n      screenOptions={{\n        header: ({ scene, previous, navigation }) => {\n          const { options } = scene.descriptor;\n          const title =\n            options.headerTitle !== undefined\n              ? options.headerTitle\n              : options.title !== undefined\n              ? options.title\n              : scene.route.name;\n\n          return (\n            <Appbar.Header\n              theme={{ colors: { primary: theme.colors.surface } }}\n            >\n              {previous ? (\n                <Appbar.BackAction\n                  onPress={navigation.goBack}\n                  color={theme.colors.primary}\n                />\n              ) : (\n                <TouchableOpacity\n                  style={{ marginLeft: 10 }}\n                  onPress={() => {\n                    (\n                      navigation as any as DrawerNavigationProp<{}>\n                    ).openDrawer();\n                  }}\n                >\n                  {vendorIcon ? (\n                    <Avatar.Image\n                      size={40}\n                      source={{\n                        uri: vendorIcon,\n                      }}\n                    />\n                  ) : vendorInitials ? (\n                    <Avatar.Text size={40} label={vendorInitials} />\n                  ) : (\n                    <Avatar.Icon size={40} icon=\"account\" />\n                  )}\n                </TouchableOpacity>\n              )}\n              <Appbar.Content\n                title={\n                  title === \"Store\" ? (\n                    <MaterialCommunityIcons\n                      style={{ marginRight: 10 }}\n                      name=\"package-variant-closed\"\n                      size={40}\n                      color={theme.colors.primary}\n                    />\n                  ) : (\n                    title\n                  )\n                }\n                titleStyle={{\n                  fontSize: 18,\n                  fontWeight: \"bold\",\n                  color: theme.colors.primary,\n                }}\n              />\n            </Appbar.Header>\n          );\n        },\n      }}\n    >\n      <Stack.Screen\n        name=\"Products\"\n        component={BottomTabs}\n        options={({ route }) => {\n          const routeName = getFocusedRouteNameFromRoute(route) ?? \"Store\";\n          return { headerTitle: routeName };\n        }}\n      />\n      <Stack.Screen\n        name=\"ProductDetails\"\n        component={ProductDetailScreen}\n        options={{ headerTitle: \"Product Details\" }}\n      />\n    </Stack.Navigator>\n  );\n};\n","import React from \"react\";\n\ntype PreferencesContextType = {\n  theme: \"light\" | \"dark\";\n  rtl: \"left\" | \"right\";\n  toggleTheme: () => void;\n  toggleRTL: () => void;\n};\n\nexport const PreferencesContext = React.createContext<PreferencesContextType>({\n  rtl: \"left\",\n  theme: \"light\",\n  toggleTheme: () => {},\n  toggleRTL: () => {},\n});\n","import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport {\n  DrawerContentComponentProps,\n  DrawerContentOptions,\n  DrawerNavigationProp,\n  DrawerContentScrollView,\n  DrawerItem,\n} from \"@react-navigation/drawer\";\nimport React from \"react\";\nimport { StyleSheet, TouchableOpacity, View } from \"react-native\";\nimport {\n  Avatar,\n  Caption,\n  Drawer,\n  Paragraph,\n  Switch,\n  Text,\n  Title,\n  TouchableRipple,\n  useTheme,\n} from \"react-native-paper\";\nimport Animated from \"react-native-reanimated\";\n\nimport { PreferencesContext } from \"../../context/preferences.context\";\n\nimport { useVendorData } from \"../../context/vendor.context\";\nimport { useVendorIcon } from \"../../hooks/useVendorIcon\";\n\ntype Props = DrawerContentComponentProps<DrawerContentOptions>;\n\nexport function DrawerContent(props: Props) {\n  const { vendor } = useVendorData();\n  const { vendorIcon, vendorInitials } = useVendorIcon();\n  const paperTheme = useTheme();\n  const { rtl, theme, toggleRTL, toggleTheme } =\n    React.useContext(PreferencesContext);\n\n  const translateX = Animated.interpolateNode(props.progress, {\n    inputRange: [0, 0.5, 0.7, 0.8, 1],\n    outputRange: [-100, -85, -70, -45, 0],\n  });\n\n  return (\n    <DrawerContentScrollView {...props}>\n      <Animated.View\n        //@ts-ignore\n        style={[\n          styles.drawerContent,\n          {\n            backgroundColor: paperTheme.colors.surface,\n            transform: [{ translateX }],\n          },\n        ]}\n      >\n        <View style={styles.userInfoSection}>\n          <TouchableOpacity\n            style={{ marginLeft: 10 }}\n            onPress={() => {\n              props.navigation.toggleDrawer();\n            }}\n          >\n            {vendorIcon ? (\n              <Avatar.Image\n                size={40}\n                style={{ marginRight: 10 }}\n                source={{\n                  uri: vendorIcon,\n                }}\n              />\n            ) : vendorInitials ? (\n              <Avatar.Text size={50} label={vendorInitials} />\n            ) : (\n              <Avatar.Icon size={50} icon=\"account\" />\n            )}\n            {/* <Avatar.Image\n              source={{\n                uri: \"https://pbs.twimg.com/profile_images/952545910990495744/b59hSXUd_400x400.jpg\",\n              }}\n              size={50}\n            /> */}\n          </TouchableOpacity>\n          <Title style={styles.title}>\n            {vendor?.name ? vendor.name : \"Dawid\"}\n          </Title>\n          <Caption style={styles.caption}>\n            {vendor?.online ? \"Online\" : \"Offline\"}\n          </Caption>\n          <View style={styles.row}>\n            <View style={styles.section}>\n              <Paragraph style={[styles.paragraph, styles.caption]}>\n                {vendor?.product_count || \"failed to fetch\"}\n              </Paragraph>\n              <Caption style={styles.caption}>Products</Caption>\n            </View>\n            <View style={styles.section}>\n              <Paragraph style={[styles.paragraph, styles.caption]}>\n                {vendor?.order_count || \"failed to fetch\"}\n              </Paragraph>\n              <Caption style={styles.caption}>Transactions</Caption>\n            </View>\n          </View>\n        </View>\n        <Drawer.Section style={styles.drawerSection}>\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons\n                name=\"account-outline\"\n                color={color}\n                size={size}\n              />\n            )}\n            label=\"Profile\"\n            onPress={() => {}}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name=\"tune\" color={color} size={size} />\n            )}\n            label=\"Preferences\"\n            onPress={() => {}}\n          />\n          <DrawerItem\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons\n                name=\"bookmark-outline\"\n                color={color}\n                size={size}\n              />\n            )}\n            label=\"Bookmarks\"\n            onPress={() => {}}\n          />\n        </Drawer.Section>\n        <Drawer.Section title=\"Preferences\">\n          <TouchableRipple onPress={toggleTheme}>\n            <View style={styles.preference}>\n              <Text>Dark Theme</Text>\n              <View pointerEvents=\"none\">\n                <Switch value={theme === \"dark\"} />\n              </View>\n            </View>\n          </TouchableRipple>\n          <TouchableRipple onPress={toggleRTL}>\n            <View style={styles.preference}>\n              <Text>RTL</Text>\n              <View pointerEvents=\"none\">\n                <Switch value={rtl === \"right\"} />\n              </View>\n            </View>\n          </TouchableRipple>\n        </Drawer.Section>\n      </Animated.View>\n    </DrawerContentScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  drawerContent: {\n    flex: 1,\n  },\n  userInfoSection: {\n    paddingLeft: 20,\n  },\n  title: {\n    marginTop: 20,\n    fontWeight: \"bold\",\n  },\n  caption: {\n    fontSize: 14,\n    lineHeight: 14,\n  },\n  row: {\n    marginTop: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  section: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginRight: 15,\n  },\n  paragraph: {\n    fontWeight: \"bold\",\n    marginRight: 3,\n  },\n  drawerSection: {\n    marginTop: 15,\n  },\n  preference: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n  },\n});\n","import React from \"react\";\n\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\n\nimport { StackNavigator } from \"./productStackNavigator\";\nimport { DrawerContent } from \"../screens/vendor/drawerContent\";\n\nconst Drawer = createDrawerNavigator();\n\nexport const DrawerNavigator = () => {\n  return (\n    <Drawer.Navigator drawerContent={(props) => <DrawerContent {...props} />}>\n      <Drawer.Screen name=\"Home\" component={StackNavigator} />\n    </Drawer.Navigator>\n  );\n};\n","import {\n  DefaultTheme as NavigationDefaultTheme,\n  DarkTheme as NavigationDarkTheme,\n} from \"@react-navigation/native\";\nimport {\n  DefaultTheme as PaperDefaultTheme,\n  DarkTheme as PaperDarkTheme,\n} from \"react-native-paper\";\n\nexport const CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: \"#1ba1f2\",\n  },\n};\n\nexport const CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: \"#1ba1f2\",\n  },\n};\n","import * as React from \"react\";\nimport {\n  NavigationContainerRef,\n  ParamListBase,\n  StackActions,\n  StackActionType,\n} from \"@react-navigation/native\";\n\nlet navigators: NavigationContainerRef;\n\nexport const isReadyRef = React.createRef();\n\nexport const navigationRef = React.createRef<NavigationContainerRef>();\n\nexport function navigate(name: string, params: ParamListBase) {\n  navigationRef.current?.navigate(name, params);\n}\n\nexport function goBack() {\n  navigationRef.current?.goBack();\n}\n\nexport function push(name: string, params?: object | undefined) {\n  navigationRef.current?.dispatch(StackActions.push(name, params));\n}\n\nexport const changeStack = (stackName: string) => {\n  resetRoot(stackName);\n};\n\nconst resetRoot = (routeName: string) => {\n  navigationRef.current?.resetRoot({\n    index: 0,\n    routes: [{ name: routeName }],\n  });\n};\n\nexport { navigators };\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { useTheme } from \"react-native-paper\";\nimport { StackNavigator } from \"./productStackNavigator\";\nimport { AccountStackNavigator } from \"./accountStackNavigator\";\nimport { DrawerContent } from \"../screens/vendor/drawerContent\";\n\nimport { DrawerNavigator } from \"./drawerNavigator\";\nimport { SignIn } from \"../components/account/accounSign\";\nimport { SignUpScreen } from \"../screens/account/signUpScreen\";\nimport { SplashScreen } from \"../screens/account/splashScreen\";\n\nimport {\n  CombinedDarkTheme,\n  CombinedDefaultTheme,\n} from \"../components/common/theme\";\n\nimport {\n  navigationRef,\n  isReadyRef,\n  // setTopLevelNavigator,\n} from \"./rootNavigator\";\n\nimport { AuthStackNavigationParamList } from \"../types\";\n\nimport UserProvider from \"../context/user.context\";\nimport AuthProvider, { useAuth } from \"../context/auth.context\";\nimport AuthorizationProvider from \"../context/authorization.context\";\n\nimport {\n  stateConditionString,\n  AuthStateInterface,\n  AuthContext,\n} from \"../context/authUtils\";\n\nconst Stack = createStackNavigator<AuthStackNavigationParamList>();\nconst Drawer = createDrawerNavigator();\nconst RootStack = createStackNavigator();\n\nexport const CoreNavigator = () => {\n  const { state } = React.useContext(AuthContext);\n  // setTopLevelNavigator()\n  // const isReady = React.useRef(isReadyRef);\n  // const [readyState, setReadyState] = React.useState(false);\n  // const { state } = useAuth();\n\n  // const { accessToken, loading, isSignOut } = state;\n\n  // React.useEffect(() => {\n  //   if (state) {\n  //     setReadyState(true);\n  //   }\n  // }, [state]);\n\n  // const chooseScreen = (state: AuthStateInterface) => {\n  //   let navigateTo = stateConditionString(state);\n  //   let arr = [];\n\n  //   switch (navigateTo) {\n  //     case \"LOAD_APP\":\n  //       arr.push(<Stack.Screen name=\"SplashScreen\" component={SplashScreen} />);\n  //       break;\n\n  //     case \"LOAD_SIGNUP\":\n  //       arr.push(\n  //         <Stack.Screen\n  //           name=\"SignUpScreen\"\n  //           component={SignUpScreen}\n  //           options={{\n  //             title: \"Sign Up\",\n  //             animationTypeForReplace: state.isSignedOut ? \"pop\" : \"push\",\n  //           }}\n  //         />\n  //       );\n  //       break;\n  //     case \"LOAD_SIGNIN\":\n  //       arr.push(<Stack.Screen name=\"SignInScreen\" component={SignIn} />);\n  //       break;\n\n  //     case \"LOAD_HOME\":\n  //       arr.push(\n  //         <Drawer.Navigator\n  //           drawerContent={(props) => <DrawerContent {...props} />}\n  //         >\n  //           <Drawer.Screen name=\"Home\" component={StackNavigator} />\n  //           {/* <Drawer.Screen name=\"Account\" component={AccountStackNavigator} /> */}\n  //         </Drawer.Navigator>\n  //       );\n  //       break;\n  //     default:\n  //       arr.push(<Stack.Screen name=\"SignInScreen\" component={SignIn} />);\n  //       break;\n  //   }\n  //   return arr[0];\n  // };\n\n  const onReady = isReadyRef.current as React.MutableRefObject<boolean>;\n\n  React.useEffect(() => {\n    return () => {\n      // onReady.current = false;\n      (isReadyRef as React.MutableRefObject<boolean>).current = false;\n    };\n  }, []);\n\n  console.log(\"root state\", navigationRef?.current?.getRootState());\n\n  console.log(state.isSignedIn);\n  const theme = useTheme();\n  const navigationTheme = theme.dark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n  return (\n    <>\n      <NavigationContainer\n        ref={navigationRef}\n        onReady={() => {\n          // onReady.current = true;\n          (isReadyRef as React.MutableRefObject<boolean>).current = true;\n        }}\n        theme={navigationTheme}\n      >\n        <>\n          <>\n            {state.isSignedIn ? <DrawerNavigator /> : <AccountStackNavigator />}\n          </>\n        </>\n      </NavigationContainer>\n    </>\n  );\n};\n","import * as SecureStore from \"expo-secure-store\";\n\nexport const nativeStorage = {\n  getToken: async () =>\n    SecureStore.getItemAsync(\"token\").then((json: any) => {\n      return JSON.parse(json);\n    }),\n  setToken: async (accessToken: AccessToken[\"accessToken\"]) =>\n    SecureStore.setItemAsync(\"token\", JSON.stringify(accessToken)),\n  clearToken: async () => SecureStore.deleteItemAsync(\"token\"),\n\n  setLogoutEvent: () =>\n    window.localStorage.setItem(\"app_logout\", JSON.stringify(Date.now())),\n};\n","import React from \"react\";\nimport { Platform } from \"react-native\";\nimport * as Navigator from \"../navigation/rootNavigator\";\nimport {\n  authReducer,\n  AuthContext,\n  initialState,\n  AuthAction,\n  AuthStateInterface,\n  AuthActionTypes,\n  stateConditionString,\n} from \"./authUtils\";\nimport { localStorage } from \"../utils/storage\";\nimport { nativeStorage } from \"../utils/nativeStorage\";\nimport {\n  signInRequest,\n  signUpRequest,\n  signOutRequest,\n} from \"../services/auth.service\";\nimport { AccountActionTypes } from \"./auth.context\";\nimport { AuthResponseType } from \"../types\";\nimport { useVendorData, VendorActionTypes } from \"./vendor.context\";\n\nexport default function AuthorizationProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [state, dispatch] = React.useReducer(\n    (prevState = initialState, action: AuthAction): AuthStateInterface => {\n      switch (action.type) {\n        case AuthActionTypes.TO_SIGNUP_PAGE:\n          return {\n            ...prevState,\n            isLoading: false,\n            isSignedUp: false,\n            noAccount: true,\n          };\n        case AuthActionTypes.TO_SIGNIN_PAGE:\n          return {\n            ...prevState,\n            isLoading: false,\n            isSignedIn: false,\n            noAccount: false,\n          };\n        case AuthActionTypes.RESTORE_TOKEN:\n          return {\n            ...prevState,\n            userToken: action.token,\n            isLoading: false,\n          };\n        case AuthActionTypes.SIGNED_UP:\n          return {\n            ...prevState,\n            isSignedIn: true,\n            isSignedUp: true,\n            isLoading: false,\n            userToken: action.token,\n          };\n        case AuthActionTypes.SIGN_IN:\n          return {\n            ...prevState,\n            isSignedOut: false,\n            isSignedIn: true,\n            isSignedUp: true,\n            userToken: action.token,\n          };\n        case AuthActionTypes.SIGN_OUT:\n          return {\n            ...prevState,\n            isSignedOut: true,\n          };\n      }\n    },\n    initialState\n  );\n\n  React.useEffect(() => {\n    // Fetch the token from storage then navigate to our appropriate place\n    const bootstrapAsync = async () => {\n      let userToken;\n      if (Platform.OS !== \"web\") {\n        try {\n          userToken = await nativeStorage.getToken();\n        } catch (e: any) {\n          // Restoring token failed\n          console.log(\"error\", e.message);\n        }\n      }\n\n      try {\n        console.log(\"else\");\n        userToken = await localStorage.getToken();\n      } catch (e: any) {\n        console.log(\"error\", e.message);\n      }\n\n      // After restoring token, we may need to validate it in production apps\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n      dispatch({ type: AuthActionTypes.RESTORE_TOKEN, token: userToken });\n    };\n    bootstrapAsync();\n  }, []);\n\n  const { dispatch: vendorDispatch, setVendorId } = useVendorData();\n\n  // In a production app, we need to send some data (usually username, password) to server and get a token\n  // We will also need to handle errors if sign in failed\n  // After getting token, we need to persist the token using `AsyncStorage`\n  const authContextValue = React.useMemo(\n    () => ({\n      signIn: async (username: string, password: string) => {\n        if (username !== undefined && password !== undefined) {\n          await signInRequest({\n            body: {\n              username,\n              password,\n            },\n          }).then((response) => {\n            if (response.ok) {\n              response.json().then((data: AuthResponseType) => {\n                if (data) {\n                  console.log(data);\n                  dispatch({\n                    type: AuthActionTypes.SIGN_IN,\n                    token: data.access,\n                  });\n                  vendorDispatch({\n                    type: VendorActionTypes.fetchVendorSuccess,\n                    vendor: data.user,\n                  });\n                  // @ts-ignore\n                  Navigator.changeStack(\"Products\");\n                  console.log(Navigator.changeStack(\"Products\"));\n                }\n              });\n            } else {\n              vendorDispatch({\n                type: VendorActionTypes.fetchVendorFailure,\n              });\n              console.log(\"Request failed\");\n            }\n          });\n        } else {\n          dispatch({ type: AuthActionTypes.TO_SIGNIN_PAGE, token: null });\n        }\n      },\n\n      signOut: async () => {\n        await signOutRequest({\n          accessToken: state.userToken,\n        }).then((response) => {\n          if (response.ok) {\n            dispatch({ type: AuthActionTypes.SIGN_OUT, token: null });\n          } else {\n            console.log(\"Sign Out Failed\");\n          }\n        });\n      },\n\n      signUp: async (username: string, email: string, password: string) => {\n        if (\n          username !== undefined &&\n          email !== undefined &&\n          password !== undefined\n        ) {\n          await signUpRequest({\n            body: {\n              username,\n              email,\n              password,\n            },\n          }).then((response) => {\n            if (response.ok) {\n              response.json().then((data: AuthResponseType) => {\n                if (data) {\n                  dispatch({\n                    type: AuthActionTypes.SIGNED_UP,\n                    token: data.access,\n                  });\n\n                  setVendorId(data.user.id.toString());\n\n                  vendorDispatch({\n                    type: VendorActionTypes.fetchVendorSuccess,\n                    vendor: data.user,\n                  });\n                }\n              });\n            } else {\n              vendorDispatch({\n                type: VendorActionTypes.fetchVendorFailure,\n              });\n            }\n          });\n        } else {\n          dispatch({ type: AuthActionTypes.TO_SIGNUP_PAGE, token: null });\n        }\n      },\n      state,\n      isSignedOut: state.isSignedOut,\n      isSignedIn: state.isSignedIn,\n      isLoading: state.isLoading,\n      noAccount: state.noAccount,\n      userToken: state.userToken,\n    }),\n\n    [state]\n  );\n\n  // const chooseScreen = (state: AuthStateInterface) => {\n  //   let navigateTo = stateConditionString(state);\n  //   let arr = [];\n\n  //   switch (navigateTo) {\n  //     case \"LOAD_APP\":\n  //       arr.push(<Stack.Screen name=\"Splash\" component={SplashScreen} />);\n  //       break;\n\n  //     case \"LOAD_SIGNUP\":\n  //       arr.push(\n  //         <Stack.Screen\n  //           name=\"SignUp\"\n  //           component={SignUpScreen}\n  //           options={{\n  //             title: \"Sign Up\",\n  //             animationTypeForReplace: state.isSignout ? \"pop\" : \"push\",\n  //           }}\n  //         />\n  //       );\n  //       break;\n  //     case \"LOAD_SIGNIN\":\n  //       arr.push(<Stack.Screen name=\"SignIn\" component={SignInScreen} />);\n  //       break;\n\n  //     case \"LOAD_HOME\":\n  //       arr.push(\n  //         <Stack.Screen\n  //           name=\"Home\"\n  //           component={createHomeStack}\n  //           options={{\n  //             title: \"Home Screen Parent\",\n  //             headerStyle: { backgroundColor: \"black\" },\n  //             headerTintColor: \"white\",\n  //           }}\n  //         />\n  //       );\n  //       break;\n  //     default:\n  //       arr.push(<Stack.Screen name=\"SignIn\" component={SignInScreen} />);\n  //       break;\n  //   }\n  //   return arr[0];\n  // };\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n      {/* <NavigationContainer>\n        <Stack.Navigator>{chooseScreen(state)}</Stack.Navigator>\n      </NavigationContainer> */}\n    </AuthContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { I18nManager } from \"react-native\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\n\nimport * as Updates from \"expo-updates\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { CoreNavigator } from \"./navigation/coreNavigator\";\nimport { PreferencesContext } from \"./context/preferences.context\";\nimport VendorDataProvider from \"./context/vendor.context\";\nimport ProductsDataProvider from \"./context/products.context\";\nimport AuthorizationProvider from \"./context/authorization.context\";\nimport AuthProvider, { useAuth } from \"./context/auth.context\";\nimport UserProvider from \"./context/user.context\";\nimport {\n  CombinedDefaultTheme,\n  CombinedDarkTheme,\n} from \"./components/common/theme\";\n\nexport const Core = () => {\n  const colorScheme = useColorScheme();\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(\n    colorScheme === \"dark\" ? \"dark\" : \"light\"\n  );\n  const [rtl] = React.useState<boolean>(I18nManager.isRTL);\n\n  function toggleTheme() {\n    setTheme((theme) => (theme === \"light\" ? \"dark\" : \"light\"));\n  }\n\n  const toggleRTL = React.useCallback(() => {\n    I18nManager.forceRTL(!rtl);\n    Updates.reloadAsync();\n  }, [rtl]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      toggleRTL,\n      theme,\n      rtl: (rtl ? \"right\" : \"left\") as \"right\" | \"left\",\n    }),\n    [rtl, theme, toggleRTL]\n  );\n\n  return (\n    <>\n      <PreferencesContext.Provider value={preferences}>\n        <PaperProvider\n          theme={theme === \"light\" ? CombinedDefaultTheme : CombinedDarkTheme}\n        >\n          <VendorDataProvider>\n            <AuthorizationProvider>\n              <>\n                <ProductsDataProvider>\n                  <UserProvider>\n                    <CoreNavigator />\n                  </UserProvider>\n                </ProductsDataProvider>\n              </>\n            </AuthorizationProvider>\n          </VendorDataProvider>\n        </PaperProvider>\n      </PreferencesContext.Provider>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"react-native-gesture-handler\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { AppearanceProvider } from \"react-native-appearance\";\n// import AuthorizationProviderfrom from './src/context/authorization.context'\nimport useCachedResources from \"./src/hooks/useCachedResources\";\nimport AppLoader from \"./native/AppLoader\";\nimport { Core } from \"./src/core\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n  if (!isLoadingComplete) {\n    return <AppLoader />;\n  } else {\n    return (\n      <>\n        <AppearanceProvider>\n          <SafeAreaProvider>\n            <Core />\n            {/* <Main /> */}\n            {/* <StatusBar /> */}\n          </SafeAreaProvider>\n        </AppearanceProvider>\n      </>\n    );\n  }\n}\n","import { Ionicons } from \"@expo/vector-icons\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport * as React from \"react\";\n\nimport {\n  DEFAULT_ADAPTIVE_ICON,\n  MOBILE_SPLASHSCREEN,\n} from \"../constants/backend.constants\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          \"space-mono\": require(\"../../assets/fonts/SpaceMono-Regular.ttf\"),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n\n// const startAsync = React.useMemo(\n//   // If you use a local image with require(...), use `Asset.fromModule`\n//   () => () => Asset.fromURI(image).downloadAsync(),\n//   [image]\n// );\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}